/******************************************************************************
 * Copyright (c) 2023-2025, NVIDIA CORPORATION. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *  * Neither the name of NVIDIA CORPORATION nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 ******************************************************************************/

mdl 1.7;

import ::df::*;
import ::state::*;

export struct lookup_value
{
    bool valid = true;
    color value = color(0.25, 0.5, 0.75);
    float alpha = 1.0f;
};

export color extract_value(lookup_value lookup = lookup_value())
{
    return lookup.valid ? lookup.value : color(1.0, 0.0, 1.0);
}

// we are interested in the default value and how it's preserved through USD
export material main_defaults(
    lookup_value lookup = lookup_value()
) = material(
    surface: material_surface(
        scattering: df::diffuse_reflection_bsdf(
            tint: lookup.valid ? lookup.value : color(1.0, 0.0, 0.0))
    ),
    geometry: material_geometry(
        cutout_opacity: lookup.valid ? lookup.alpha : 1.0
    )
);

export material main_indirect(
    color tint = extract_value(
        lookup: lookup_value())
) = material(
    surface: material_surface(
        scattering: df::diffuse_reflection_bsdf(
            tint: tint)
    )
);

export color create_value(float scale = 0.5)
{
    return color(state::normal() * scale);
}

export color create_value_2(float scale_2 = 0.5)
{
    return color(state::normal() * scale_2);
}

// using state or other functions in constructors forces the creation of a default call
export material main_array(
    float a = 1.0,
    float b = 1.0,
    color[4] data = color[](
        color(0.25, 0.5, 0.75),
        color(::state::position() * a),
        create_value(b),
        create_value_2(b) // usa b second time
    ),
    int index = 0
) = material(
    surface: material_surface(
        scattering: df::diffuse_reflection_bsdf(
            tint: (index < 0 || index >= 4) ? color(1.0, 0.0, 0.0) : data[index]
            )
    )
);
