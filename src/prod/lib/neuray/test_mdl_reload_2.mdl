/******************************************************************************
 * Copyright (c) 2019-2023, NVIDIA CORPORATION. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *  * Neither the name of NVIDIA CORPORATION nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 ******************************************************************************/

mdl 1.3;

import df::*;
import state::*;

// a new parameter other tint has been added.
export material md_1(color tint = color(1.0, 1.0, 1.0), color other_tint = color(1.0,1.0,0.0))
= material(
    surface: material_surface(
        scattering: df::diffuse_reflection_bsdf(tint: tint)
    ),
    backface: material_surface(
        scattering: df::diffuse_reflection_bsdf(tint: other_tint)
    )
);

// the interface has not changed, but the body uses a different bsdf.
export material md_2(float f = 1.0)
= material(
    surface: material_surface(
        scattering: df::diffuse_transmission_bsdf(tint: color(f))
    )
);

// md_3 has been removed.

// default value has been changed.
export material md_4(float f = 0.5)
= material(
    surface: material_surface(
        scattering: df::diffuse_reflection_bsdf(roughness: f)
    )
);

// the return type and the body have changed.
export color fd_1(float f=1.0)
{
    return color((::state::normal() + 1.0) * 0.5 * f);
}

export color fd_2(float f=1.0)
{
    return color(::state::texture_coordinate(0)* f);
}

export struct test_struct
{
    float a;
    float c;
};
