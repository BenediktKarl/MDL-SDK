/******************************************************************************
 * Copyright (c) 2019-2023, NVIDIA CORPORATION. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *  * Neither the name of NVIDIA CORPORATION nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 ******************************************************************************/

mdl 1.3;

import ::anno::*;
import ::df::*;

export struct struct_one
{
    bool    a = true;
    int     b = 1;
    float   c = 1.0;
};

export struct struct_two
{
    bool    d = false;
    int     e = 0;
    float   f = 0.0;
};

export float structure_test(struct_one v = struct_one())
{
    return v.c;
}

export float structure_test_modifier(uniform struct_one v = struct_one())
{
    return v.c;
}

export struct_two struct_return(bool v=false [[ ::anno::unused() ]])
{
    return struct_two();
}

export uniform struct_two struct_return_modifier(bool v=false [[ ::anno::unused() ]])
{
    return struct_two();
}

export float structure_test_func(struct_one v = struct_one())
{
    return v.c;
}

export material structure_test_mat(struct_one v = struct_one())
= material(
    surface: material_surface(scattering: df::diffuse_reflection_bsdf(tint: color(v.c)))
);
