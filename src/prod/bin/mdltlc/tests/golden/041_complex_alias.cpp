/******************************************************************************
 * Copyright (c) 2022-2023, NVIDIA CORPORATION. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *  * Neither the name of NVIDIA CORPORATION nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *****************************************************************************/
// Generated by mdltlc

#include "pch.h"

#include "041_complex_alias.h"

#include <mi/mdl/mdl_distiller_plugin_api.h>
#include <mi/mdl/mdl_distiller_plugin_helper.h>

using namespace mi::mdl;

namespace MI {
namespace DIST {

// Return the strategy to be used with this rule set.
Rule_eval_strategy Complex_alias::get_strategy() const {
    return RULE_EVAL_BOTTOM_UP;
}

// Return the name of the rule set.
char const * Complex_alias::get_rule_set_name() const {
    return "Complex_alias";
}

// Return the number of imports of this rule set.
size_t Complex_alias::get_target_material_name_count() const {
    return 0;
}

// Return the name of the import at index i.
char const *Complex_alias::get_target_material_name(size_t i) const {
    return nullptr;
}

// Run the matcher.
DAG_node const* Complex_alias::matcher(
    IRule_matcher_event *event_handler,
    IDistiller_plugin_api &e,
    DAG_node const *node,
    const mi::mdl::Distiller_options *options,
    Rule_result_code &result_code)const
{
    switch (e.get_selector(node)) {
    case mi::mdl::DS_DIST_DEFAULT_BSDF: // match for bsdf()
// 041_complex_alias.mdltl:16
//RUID 595362
        if (true) {
            const DAG_node* v_a = node;
            if (event_handler != nullptr)
                fire_match_event(*event_handler, 0);
            DAG_node const *node_result_1 = v_a;
            DAG_node const *node_result_1_local_normal_w = e.create_float_constant(0.0f);
            e.set_attribute(node_result_1, "local_normal_w",node_result_1_local_normal_w);
            DAG_node const *node_result_1_local_normal = e.create_function_call("::state::normal",
                    Nodes_wrapper<0>().data(), 0);
            e.set_attribute(node_result_1, "local_normal",node_result_1_local_normal);
            return node_result_1;
        }
        break;
    case mi::mdl::IDefinition::DS_INTRINSIC_DF_DIFFUSE_REFLECTION_BSDF: // match for diffuse_reflection_bsdf(_, _)
// 041_complex_alias.mdltl:18
//RUID 230824
        if (true) {
            const DAG_node* v_a = node;
            if (event_handler != nullptr)
                fire_match_event(*event_handler, 1);
            DAG_node const *node_result_2 = v_a;
            DAG_node const *node_result_2_local_normal_w = e.create_float_constant(0.0f);
            e.set_attribute(node_result_2, "local_normal_w",node_result_2_local_normal_w);
            DAG_node const *node_result_2_local_normal = e.create_function_call("::state::normal",
                    Nodes_wrapper<0>().data(), 0);
            e.set_attribute(node_result_2, "local_normal",node_result_2_local_normal);
            return node_result_2;
        }
        break;
    case mi::mdl::DS_DIST_STRUCT_MATERIAL: // match for material(tw, material_surface(_, _) [[ local_normal ~ nl ]], bf, ior, vol, material_geometry(d, cutout, n), hair)
// 041_complex_alias.mdltl:13
//RUID 895506
        if (true
        && (e.get_selector(e.get_compound_argument(node, 1)) == mi::mdl::DS_DIST_STRUCT_MATERIAL_SURFACE)
        && (e.attribute_exists(e.get_compound_argument(node, 1), "local_normal"))
        && (e.get_selector(e.get_compound_argument(node, 5)) == mi::mdl::DS_DIST_STRUCT_MATERIAL_GEOMETRY)) {
            const DAG_node* v_tw = e.get_compound_argument(node, 0);
            const DAG_node *vv_0_local_normal = e.get_attribute(e.get_compound_argument(node, 1), "local_normal");
            const DAG_node* v_nl = vv_0_local_normal;
            const DAG_node* v_bf = e.get_compound_argument(node, 2);
            const DAG_node* v_ior = e.get_compound_argument(node, 3);
            const DAG_node* v_vol = e.get_compound_argument(node, 4);
            const DAG_node* v_d = e.get_compound_argument(e.get_compound_argument(node, 5), 0);
            const DAG_node* v_cutout = e.get_compound_argument(e.get_compound_argument(node, 5), 1);
            const DAG_node* v_n = e.get_compound_argument(e.get_compound_argument(node, 5), 2);
            const DAG_node* v_hair = e.get_compound_argument(node, 6);
            DAG_node const* v_nprime = e.create_function_call("::nvidia::distilling_support::add_detail_normal",
                Nodes_wrapper<2>(v_nl, v_n).data(), 2);
            if (e.eval_maybe_if(e.create_binary(
                IDistiller_plugin_api::OK_NOT_EQUAL,
                    v_n,
                    v_nl))) {
                if (event_handler != nullptr)
                    fire_match_event(*event_handler, 2);
                return e.create_call("material(bool,material_surface,material_surface,color,material_volume,material_geometry,hair_bsdf)",
                    IDefinition::DS_ELEM_CONSTRUCTOR, Args_wrapper<7>::mk_args(e,m_node_types,
                        material, v_tw, e.create_call("material_surface(bsdf,material_emission)",
                            IDefinition::DS_ELEM_CONSTRUCTOR, Args_wrapper<2>::mk_args(
                                e,m_node_types, material_surface).args, 2, e.get_type_factory()->
                            get_predefined_struct(IType_struct::SID_MATERIAL_SURFACE)),
                        v_bf, v_ior, v_vol, e.create_call("material_geometry(float3,float,float3)",
                            IDefinition::DS_ELEM_CONSTRUCTOR, Args_wrapper<3>::mk_args(
                                e,m_node_types, material_geometry, v_d, v_cutout,
                                v_nprime).args, 3, e.get_type_factory()->get_predefined_struct(
                            IType_struct::SID_MATERIAL_GEOMETRY)), v_hair).args,
                    7, e.get_type_factory()->get_predefined_struct(IType_struct::SID_MATERIAL));
            }
        }
        break;
    default:
        break;
    }

    return node;
}

bool Complex_alias::postcond(
    IRule_matcher_event *event_handler,
    IDistiller_plugin_api &e,
    DAG_node const *root,
    const mi::mdl::Distiller_options *options) const
{
    (void)e; (void)root; // no unused variable warnings
    bool result = true;
    if (!result && event_handler != NULL)
        fire_postcondition_event(*event_handler);
    return result;
}

void Complex_alias::fire_match_event(
    mi::mdl::IRule_matcher_event &event_handler,
    std::size_t id)
{
    Rule_info const &ri = g_rule_info[id];
    event_handler.rule_match_event("Complex_alias", ri.ruid, ri.rname, ri.fname,
        ri.fline);
}

void Complex_alias::fire_postcondition_event(
mi::mdl::IRule_matcher_event &event_handler)
{
    event_handler.postcondition_failed("Complex_alias");
}

void Complex_alias::fire_debug_print(
    mi::mdl::IDistiller_plugin_api &plugin_api,
    mi::mdl::IRule_matcher_event &event_handler,
    std::size_t idx,
    char const *var_name,
    DAG_node const *value)
{
    Rule_info const &ri = g_rule_info[idx];
    event_handler.debug_print(plugin_api, "Complex_alias", ri.ruid, ri.rname, ri.fname,
        ri.fline, var_name, value);
}


// Rule info table.
Complex_alias::Rule_info const Complex_alias::g_rule_info[3] = {
    { 595362, "bsdf", "041_complex_alias.mdltl", 16 },
    { 230824, "diffuse_reflection_bsdf", "041_complex_alias.mdltl", 18 },
    { 895506, "material", "041_complex_alias.mdltl", 13 }
};


} // DIST
} // MI
// End of generated code
