/******************************************************************************
 * Copyright (c) 2022-2024, NVIDIA CORPORATION. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *  * Neither the name of NVIDIA CORPORATION nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *****************************************************************************/
// Generated by mdltlc

#include "pch.h"

#include "024_attr.h"

#include <mi/mdl/mdl_distiller_plugin_api.h>
#include <mi/mdl/mdl_distiller_plugin_helper.h>

using namespace mi::mdl;

namespace MI {
namespace DIST {

// Return the strategy to be used with this rule set.
Rule_eval_strategy Attr::get_strategy() const {
    return RULE_EVAL_BOTTOM_UP;
}

// Return the name of the rule set.
char const * Attr::get_rule_set_name() const {
    return "Attr";
}

// Return the number of imports of this rule set.
size_t Attr::get_target_material_name_count() const {
    return 0;
}

// Return the name of the import at index i.
char const *Attr::get_target_material_name(size_t i) const {
    return nullptr;
}

// Run the matcher.
DAG_node const* Attr::matcher(
    IRule_matcher_event *event_handler,
    IDistiller_plugin_api &e,
    DAG_node const *node,
    const mi::mdl::Distiller_options *options,
    Rule_result_code &result_code)const
{
    switch (e.get_selector(node)) {
    case mi::mdl::IDefinition::DS_INTRINSIC_DF_DIFFUSE_REFLECTION_BSDF: // match for diffuse_reflection_bsdf(c, r)
// 024_attr.mdltl:62
//RUID 753537
        if (true) {
            const DAG_node* v_c = e.get_compound_argument(node, 0);
            const DAG_node* v_r = e.get_compound_argument(node, 1);
            if (event_handler != nullptr)
                fire_match_event(*event_handler, 0);
            DAG_node const *node_result_3 = e.create_call("::df::diffuse_reflection_bsdf(color,float,string)",
                    IDefinition::DS_INTRINSIC_DF_DIFFUSE_REFLECTION_BSDF, Args_wrapper<3>::mk_args(
                        e,m_node_types, diffuse_reflection_bsdf, v_c, v_r).args,
                    3, e.get_type_factory()->create_bsdf());
            DAG_node const *node_result_3_surface_value = e.create_color_constant(1,1,1);
            e.set_attribute(node_result_3, "surface_value",node_result_3_surface_value);
            return node_result_3;
        }
        break;
    case mi::mdl::DS_DIST_STRUCT_MATERIAL: // match for material(thin_walled, surface, backface, ior, volume, geometry, hair)
// 024_attr.mdltl:14
//RUID 611548
        if (true) {
            const DAG_node* v_thin_walled = e.get_compound_argument(node, 0);
            const DAG_node* v_surface = e.get_compound_argument(node, 1);
            const DAG_node* v_backface = e.get_compound_argument(node, 2);
            const DAG_node* v_ior = e.get_compound_argument(node, 3);
            const DAG_node* v_volume = e.get_compound_argument(node, 4);
            const DAG_node* v_geometry = e.get_compound_argument(node, 5);
            const DAG_node* v_hair = e.get_compound_argument(node, 6);
            if (event_handler != nullptr)
                fire_match_event(*event_handler, 1);
            DAG_node const *node_result_0 = e.create_call("material(bool,material_surface,material_surface,color,material_volume,material_geometry,hair_bsdf)",
                    IDefinition::DS_ELEM_CONSTRUCTOR, Args_wrapper<7>::mk_args(e,m_node_types,
                        material, v_thin_walled, v_surface, v_backface, v_ior, v_volume,
                        v_geometry, v_hair).args, 7, e.get_type_factory()->get_predefined_struct(
                    IType_struct::SID_MATERIAL));
            DAG_node const *node_result_0_is_thin_walled = v_thin_walled;
            e.set_attribute(node_result_0, "is_thin_walled",node_result_0_is_thin_walled);
            return node_result_0;
        }
// 024_attr.mdltl:33
//RUID 158046
        if (true
        && (e.get_selector(node) == mi::mdl::DS_DIST_STRUCT_MATERIAL)
        && (e.get_selector(e.get_compound_argument(node, 1)) == mi::mdl::DS_DIST_STRUCT_MATERIAL_SURFACE)
        && (e.get_selector(e.get_compound_argument(e.get_compound_argument(node, 1), 0)) == mi::mdl::IDefinition::DS_INTRINSIC_DF_DIFFUSE_REFLECTION_BSDF)
        && (e.attribute_exists(node, "some_color"))) {
            const DAG_node* v_thin_walled = e.get_compound_argument(node, 0);
            const DAG_node* v_r = e.get_compound_argument(e.get_compound_argument(e.get_compound_argument(node, 1), 0), 1);
            const DAG_node* v_backface = e.get_compound_argument(node, 2);
            const DAG_node* v_ior = e.get_compound_argument(node, 3);
            const DAG_node* v_volume = e.get_compound_argument(node, 4);
            const DAG_node* v_geometry = e.get_compound_argument(node, 5);
            const DAG_node* v_hair = e.get_compound_argument(node, 6);
            const DAG_node *v_some_color = e.get_attribute(node, "some_color");
            if (event_handler != nullptr)
                fire_match_event(*event_handler, 2);
            return e.create_call("material(bool,material_surface,material_surface,color,material_volume,material_geometry,hair_bsdf)",
                IDefinition::DS_ELEM_CONSTRUCTOR, Args_wrapper<7>::mk_args(e,m_node_types,
                    material, v_thin_walled, e.create_call("material_surface(bsdf,material_emission)",
                        IDefinition::DS_ELEM_CONSTRUCTOR, Args_wrapper<2>::mk_args(
                            e,m_node_types, material_surface, e.create_call("::df::diffuse_reflection_bsdf(color,float,string)",
                                IDefinition::DS_INTRINSIC_DF_DIFFUSE_REFLECTION_BSDF,
                                Args_wrapper<3>::mk_args(e,m_node_types, diffuse_reflection_bsdf,
                                    v_some_color, v_r).args, 3, e.get_type_factory()->create_bsdf())).args,
                        2, e.get_type_factory()->get_predefined_struct(IType_struct::SID_MATERIAL_SURFACE)),
                    v_backface, v_ior, v_volume, v_geometry, v_hair).args, 7, e.get_type_factory()->
                get_predefined_struct(IType_struct::SID_MATERIAL));
        }
// 024_attr.mdltl:51
//RUID 512932
        if (true
        && (e.get_selector(node) == mi::mdl::DS_DIST_STRUCT_MATERIAL)
        && (e.get_selector(e.get_compound_argument(node, 1)) == mi::mdl::DS_DIST_STRUCT_MATERIAL_SURFACE)
        && (e.get_selector(e.get_compound_argument(e.get_compound_argument(node, 1), 0)) == mi::mdl::IDefinition::DS_INTRINSIC_DF_DIFFUSE_REFLECTION_BSDF)
        && (e.attribute_exists(node, "is_thin_walled"))
        && (e.attribute_exists(node, "_some_color"))) {
            const DAG_node* v_r = e.get_compound_argument(e.get_compound_argument(e.get_compound_argument(node, 1), 0), 1);
            const DAG_node* v_backface = e.get_compound_argument(node, 2);
            const DAG_node* v_ior = e.get_compound_argument(node, 3);
            const DAG_node* v_volume = e.get_compound_argument(node, 4);
            const DAG_node* v_geometry = e.get_compound_argument(node, 5);
            const DAG_node* v_hair = e.get_compound_argument(node, 6);
            const DAG_node *v_is_thin_walled = e.get_attribute(node, "is_thin_walled");
            const DAG_node *vv_0__some_color = e.get_attribute(node, "_some_color");
            const DAG_node* v_c = vv_0__some_color;
            if (event_handler != nullptr)
                fire_match_event(*event_handler, 3);
            return e.create_call("material(bool,material_surface,material_surface,color,material_volume,material_geometry,hair_bsdf)",
                IDefinition::DS_ELEM_CONSTRUCTOR, Args_wrapper<7>::mk_args(e,m_node_types,
                    material, v_is_thin_walled, e.create_call("material_surface(bsdf,material_emission)",
                        IDefinition::DS_ELEM_CONSTRUCTOR, Args_wrapper<2>::mk_args(
                            e,m_node_types, material_surface, e.create_call("::df::diffuse_reflection_bsdf(color,float,string)",
                                IDefinition::DS_INTRINSIC_DF_DIFFUSE_REFLECTION_BSDF,
                                Args_wrapper<3>::mk_args(e,m_node_types, diffuse_reflection_bsdf,
                                    v_c, v_r).args, 3, e.get_type_factory()->create_bsdf())).args,
                        2, e.get_type_factory()->get_predefined_struct(IType_struct::SID_MATERIAL_SURFACE)),
                    v_backface, v_ior, v_volume, v_geometry, v_hair).args, 7, e.get_type_factory()->
                get_predefined_struct(IType_struct::SID_MATERIAL));
        }
// 024_attr.mdltl:74
//RUID 968546
        if (true
        && (e.get_selector(node) == mi::mdl::DS_DIST_STRUCT_MATERIAL)
        && (e.get_selector(e.get_compound_argument(node, 1)) == mi::mdl::DS_DIST_STRUCT_MATERIAL_SURFACE)
        && (e.get_selector(e.get_compound_argument(e.get_compound_argument(node, 1), 0)) == mi::mdl::IDefinition::DS_INTRINSIC_DF_DIFFUSE_REFLECTION_BSDF)
        && (e.attribute_exists(e.get_compound_argument(e.get_compound_argument(node, 1), 0), "surface_value"))
        && (e.attribute_exists(node, "some_color"))) {
            const DAG_node* v_thin_walled = e.get_compound_argument(node, 0);
            const DAG_node* v_r = e.get_compound_argument(e.get_compound_argument(e.get_compound_argument(node, 1), 0), 1);
            const DAG_node *vv_0_surface_value = e.get_attribute(e.get_compound_argument(e.get_compound_argument(node, 1), 0), "surface_value");
            const DAG_node* v_backface = e.get_compound_argument(node, 2);
            const DAG_node* v_ior = e.get_compound_argument(node, 3);
            const DAG_node* v_volume = e.get_compound_argument(node, 4);
            const DAG_node* v_geometry = e.get_compound_argument(node, 5);
            const DAG_node* v_hair2 = e.get_compound_argument(node, 6);
            const DAG_node *v_some_color = e.get_attribute(node, "some_color");
            if (event_handler != nullptr)
                fire_match_event(*event_handler, 4);
            DAG_node const *node_result_6 = e.create_call("material(bool,material_surface,material_surface,color,material_volume,material_geometry,hair_bsdf)",
                    IDefinition::DS_ELEM_CONSTRUCTOR, Args_wrapper<7>::mk_args(e,m_node_types,
                        material, v_thin_walled, e.create_call("material_surface(bsdf,material_emission)",
                            IDefinition::DS_ELEM_CONSTRUCTOR, Args_wrapper<2>::mk_args(
                                e,m_node_types, material_surface, e.create_call("::df::diffuse_reflection_bsdf(color,float,string)",
                                    IDefinition::DS_INTRINSIC_DF_DIFFUSE_REFLECTION_BSDF,
                                    Args_wrapper<3>::mk_args(e,m_node_types, diffuse_reflection_bsdf,
                                        v_some_color, v_r).args, 3, e.get_type_factory()->create_bsdf())).args,
                            2, e.get_type_factory()->get_predefined_struct(IType_struct::SID_MATERIAL_SURFACE)),
                        v_backface, v_ior, v_volume, v_geometry, v_hair2).args, 7,
                    e.get_type_factory()->get_predefined_struct(IType_struct::SID_MATERIAL));
            DAG_node const *node_result_6_global_value = v_surface_value;
            e.set_attribute(node_result_6, "global_value",node_result_6_global_value);
            return node_result_6;
        }
// 024_attr.mdltl:93
//RUID 558659
        if (true
        && (e.get_selector(node) == mi::mdl::DS_DIST_STRUCT_MATERIAL)
        && (e.get_selector(e.get_compound_argument(node, 1)) == mi::mdl::DS_DIST_STRUCT_MATERIAL_SURFACE)
        && (e.get_selector(e.get_compound_argument(e.get_compound_argument(node, 1), 0)) == mi::mdl::IDefinition::DS_INTRINSIC_DF_DIFFUSE_REFLECTION_BSDF)
        && (e.attribute_exists(node, "_bsdf1")
        && (e.get_selector(e.get_attribute(node, "_bsdf1")) == mi::mdl::IDefinition::DS_INTRINSIC_DF_DIFFUSE_REFLECTION_BSDF))) {
            const DAG_node* v_thin_walled = e.get_compound_argument(node, 0);
            const DAG_node* v_tint = e.get_compound_argument(e.get_compound_argument(e.get_compound_argument(node, 1), 0), 0);
            const DAG_node* v_r = e.get_compound_argument(e.get_compound_argument(e.get_compound_argument(node, 1), 0), 1);
            const DAG_node* v_ior = e.get_compound_argument(node, 3);
            const DAG_node* v_volume = e.get_compound_argument(node, 4);
            const DAG_node* v_geometry = e.get_compound_argument(node, 5);
            const DAG_node* v_hair = e.get_compound_argument(node, 6);
            const DAG_node *vv_0__bsdf1 = e.get_attribute(node, "_bsdf1");
            const DAG_node* v_t1 = e.get_compound_argument(vv_0__bsdf1, 0);
            const DAG_node* v_r1 = e.get_compound_argument(vv_0__bsdf1, 1);
            if (event_handler != nullptr)
                fire_match_event(*event_handler, 5);
            DAG_node const *node_result_8 = e.create_call("material(bool,material_surface,material_surface,color,material_volume,material_geometry,hair_bsdf)",
                    IDefinition::DS_ELEM_CONSTRUCTOR, Args_wrapper<7>::mk_args(e,m_node_types,
                        material, v_thin_walled, e.create_call("material_surface(bsdf,material_emission)",
                            IDefinition::DS_ELEM_CONSTRUCTOR, Args_wrapper<2>::mk_args(
                                e,m_node_types, material_surface, e.create_call("::df::diffuse_reflection_bsdf(color,float,string)",
                                    IDefinition::DS_INTRINSIC_DF_DIFFUSE_REFLECTION_BSDF,
                                    Args_wrapper<3>::mk_args(e,m_node_types, diffuse_reflection_bsdf,
                                        v_t1, v_r1).args, 3, e.get_type_factory()->create_bsdf())).args,
                            2, e.get_type_factory()->get_predefined_struct(IType_struct::SID_MATERIAL_SURFACE)),
                        e.create_call("material_surface(bsdf,material_emission)",
                            IDefinition::DS_ELEM_CONSTRUCTOR, Args_wrapper<2>::mk_args(
                                e,m_node_types, material_surface, e.create_call("::df::diffuse_reflection_bsdf(color,float,string)",
                                    IDefinition::DS_INTRINSIC_DF_DIFFUSE_REFLECTION_BSDF,
                                    Args_wrapper<3>::mk_args(e,m_node_types, diffuse_reflection_bsdf,
                                        v_tint, v_r).args, 3, e.get_type_factory()->create_bsdf())).args,
                            2, e.get_type_factory()->get_predefined_struct(IType_struct::SID_MATERIAL_SURFACE)),
                        v_ior, v_volume, v_geometry, v_hair).args, 7, e.get_type_factory()->
                    get_predefined_struct(IType_struct::SID_MATERIAL));
            DAG_node const *node_result_8_is_thin_walled = v_thin_walled;
            e.set_attribute(node_result_8, "is_thin_walled",node_result_8_is_thin_walled);
            DAG_node const *node_result_8_global_tint = e.create_color_constant(2,2,2);
            e.set_attribute(node_result_8, "global_tint",node_result_8_global_tint);
            return node_result_8;
        }
        break;
    default:
        break;
    }

    return node;
}

bool Attr::postcond(
    IRule_matcher_event *event_handler,
    IDistiller_plugin_api &e,
    DAG_node const *root,
    const mi::mdl::Distiller_options *options) const
{
    (void)e; (void)root; // no unused variable warnings
    bool result = true;
    if (!result && event_handler != NULL)
        fire_postcondition_event(*event_handler);
    return result;
}

void Attr::fire_match_event(
    mi::mdl::IRule_matcher_event &event_handler,
    std::size_t id)
{
    Rule_info const &ri = g_rule_info[id];
    event_handler.rule_match_event("Attr", ri.ruid, ri.rname, ri.fname, ri.fline);
}

void Attr::fire_postcondition_event(
mi::mdl::IRule_matcher_event &event_handler)
{
    event_handler.postcondition_failed("Attr");
}

void Attr::fire_debug_print(
    mi::mdl::IDistiller_plugin_api &plugin_api,
    mi::mdl::IRule_matcher_event &event_handler,
    std::size_t idx,
    char const *var_name,
    DAG_node const *value)
{
    Rule_info const &ri = g_rule_info[idx];
    event_handler.debug_print(plugin_api, "Attr", ri.ruid, ri.rname, ri.fname, ri.fline,
        var_name, value);
}


// Rule info table.
Attr::Rule_info const Attr::g_rule_info[6] = {
    { 753537, "diffuse_reflection_bsdf", "024_attr.mdltl", 62 },
    { 611548, "material", "024_attr.mdltl", 14 },
    { 158046, "material", "024_attr.mdltl", 33 },
    { 512932, "material", "024_attr.mdltl", 51 },
    { 968546, "material", "024_attr.mdltl", 74 },
    { 558659, "material", "024_attr.mdltl", 93 }
};


} // DIST
} // MI
// End of generated code
