/******************************************************************************
 * Copyright (c) 2022-2025, NVIDIA CORPORATION. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *  * Neither the name of NVIDIA CORPORATION nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *****************************************************************************/
// Generated by mdltlc

#include "pch.h"

#include "030_custom_material.h"

#include <mi/mdl/mdl_distiller_plugin_api.h>
#include <mi/mdl/mdl_distiller_plugin_helper.h>

using namespace mi::mdl;

namespace MI {
namespace DIST {

// Return the strategy to be used with this rule set.
Rule_eval_strategy Custom_material::get_strategy() const {
    return RULE_EVAL_TOP_DOWN;
}

// Return the name of the rule set.
char const * Custom_material::get_rule_set_name() const {
    return "Custom_material";
}

// Return the number of imports of this rule set.
size_t Custom_material::get_target_material_name_count() const {
    return 1;
}

// Return the name of the import at index i.
char const *Custom_material::get_target_material_name(size_t i) const {
    static char const *materials[] = {
        "::Custom_material::Custom_material"
    };
    return materials[i];
}

// Run the matcher.
DAG_node const* Custom_material::matcher(
    IRule_matcher_event *event_handler,
    IDistiller_plugin_api &e,
    DAG_node const *node,
    const mi::mdl::Distiller_options *options,
    Rule_result_code &result_code) const
{
    auto match_rule1 = [&] (DAG_node const *node, IDistiller_plugin_api::Match_properties &node_props) -> const DAG_node * { return node; };

// 030_custom_material.mdltl:13
//RUID 418076
    auto match_rule0 = [&] (DAG_node const *node0, IDistiller_plugin_api::Match_properties &node_props0) -> const DAG_node * {

        // match for material(_thin_walled, material_surface(diffuse_reflection_bsdf(t, _r), _em), _backface, _ior, _volume, _geometry, _hair)
        if (node_props0.sema != IDefinition::DS_ELEM_CONSTRUCTOR || node_props0.type_kind != IType::TK_STRUCT || node_props0.struct_id != IType_struct::SID_MATERIAL) {
            return match_rule1(node0, node_props0);
        }
        DAG_node const *node2 = e.get_compound_argument(node0, 0);
        DAG_node const *v__thin_walled = node2; (void)v__thin_walled;
        DAG_node const *node4 = e.get_compound_argument(node0, 1);
        IDistiller_plugin_api::Match_properties node_props4;
        e.get_match_properties(node4, node_props4); 
        // match for material_surface(diffuse_reflection_bsdf(t, _r), _em)
        if (node_props4.sema != IDefinition::DS_ELEM_CONSTRUCTOR || node_props4.type_kind != IType::TK_STRUCT || node_props4.struct_id != IType_struct::SID_MATERIAL_SURFACE) {
            return match_rule1(node0, node_props0);
        }
        DAG_node const *node5 = e.get_compound_argument(node4, 0);
        IDistiller_plugin_api::Match_properties node_props5;
        e.get_match_properties(node5, node_props5); 
        // match for diffuse_reflection_bsdf(t, _r)
        if (node_props5.sema != IDefinition::DS_INTRINSIC_DF_DIFFUSE_REFLECTION_BSDF) {
            return match_rule1(node0, node_props0);
        }
        DAG_node const *node6 = e.get_compound_argument(node5, 0);
        DAG_node const *v_t = node6; (void)v_t;
        DAG_node const *node8 = e.get_compound_argument(node5, 1);
        DAG_node const *v__r = node8; (void)v__r;
        DAG_node const *node11 = e.get_compound_argument(node4, 1);
        DAG_node const *v__em = node11; (void)v__em;
        DAG_node const *node14 = e.get_compound_argument(node0, 2);
        DAG_node const *v__backface = node14; (void)v__backface;
        DAG_node const *node16 = e.get_compound_argument(node0, 3);
        DAG_node const *v__ior = node16; (void)v__ior;
        DAG_node const *node18 = e.get_compound_argument(node0, 4);
        DAG_node const *v__volume = node18; (void)v__volume;
        DAG_node const *node20 = e.get_compound_argument(node0, 5);
        DAG_node const *v__geometry = node20; (void)v__geometry;
        DAG_node const *node22 = e.get_compound_argument(node0, 6);
        DAG_node const *v__hair = node22; (void)v__hair;
        DAG_DbgInfo root_dbg_info = node0->get_dbg_info();
        (void) root_dbg_info;

        if (event_handler != nullptr)
            fire_match_event(*event_handler, 0);
        return e.create_function_call("::Custom_material::Custom_material", Nodes_wrapper<1>(v_t).data(),
            1, root_dbg_info);
    };
    (void)match_rule0;

    IDistiller_plugin_api::Match_properties node_props;
    e.get_match_properties(node, node_props);
    return match_rule0(node, node_props);

}

bool Custom_material::postcond(
    IRule_matcher_event *event_handler,
    IDistiller_plugin_api &e,
    DAG_node const *root,
    const mi::mdl::Distiller_options *options) const
{
    (void)e; (void)root; // no unused variable warnings
    bool result = true;
    if (!result && event_handler != NULL)
        fire_postcondition_event(*event_handler);
    return result;
}

void Custom_material::fire_match_event(
    mi::mdl::IRule_matcher_event &event_handler,
    std::size_t id)
{
    Rule_info const &ri = g_rule_info[id];
    event_handler.rule_match_event("Custom_material", ri.ruid, ri.rname, ri.fname,
        ri.fline);
}

void Custom_material::fire_postcondition_event(
mi::mdl::IRule_matcher_event &event_handler)
{
    event_handler.postcondition_failed("Custom_material");
}

void Custom_material::fire_debug_print(
    mi::mdl::IDistiller_plugin_api &plugin_api,
    mi::mdl::IRule_matcher_event &event_handler,
    std::size_t idx,
    char const *var_name,
    DAG_node const *value)
{
    Rule_info const &ri = g_rule_info[idx];
    event_handler.debug_print(plugin_api, "Custom_material", ri.ruid, ri.rname, ri.fname,
        ri.fline, var_name, value);
}


// Rule info table.
Custom_material::Rule_info const Custom_material::g_rule_info[1] = {
    { 418076, "material", "030_custom_material.mdltl", 13 }
};


} // DIST
} // MI
// End of generated code
