/******************************************************************************
 * Copyright (c) 2022-2023, NVIDIA CORPORATION. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *  * Neither the name of NVIDIA CORPORATION nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *****************************************************************************/
// Generated by mdltlc

#include "pch.h"

#include "025_local_normal.h"

#include <mi/mdl/mdl_distiller_plugin_api.h>
#include <mi/mdl/mdl_distiller_plugin_helper.h>

using namespace mi::mdl;

namespace MI {
namespace DIST {

// Return the strategy to be used with this rule set.
Rule_eval_strategy Local_normal::get_strategy() const {
    return RULE_EVAL_BOTTOM_UP;
}

// Return the name of the rule set.
char const * Local_normal::get_rule_set_name() const {
    return "Local_normal";
}

// Return the number of imports of this rule set.
size_t Local_normal::get_target_material_name_count() const {
    return 0;
}

// Return the name of the import at index i.
char const *Local_normal::get_target_material_name(size_t i) const {
    return nullptr;
}

// Run the matcher.
DAG_node const* Local_normal::matcher(
    IRule_matcher_event *event_handler,
    IDistiller_plugin_api &e,
    DAG_node const *node,
    const mi::mdl::Distiller_options *options,
    Rule_result_code &result_code)const
{
    switch (e.get_selector(node)) {
    case mi::mdl::DS_DIST_DEFAULT_BSDF: // match for bsdf()
// 025_local_normal.mdltl:12
//RUID 144237
        if (true) {
            if (event_handler != nullptr)
                fire_match_event(*event_handler, 0);
            DAG_node const *node_result_1 = e.create_bsdf_constant();
            DAG_node const *node_result_1_w = e.create_float_constant(0.0f);
            e.set_attribute(node_result_1, "w",node_result_1_w);
            DAG_node const *node_result_1_normal = e.create_function_call("::state::normal",
                    Nodes_wrapper<0>().data(), 0);
            e.set_attribute(node_result_1, "normal",node_result_1_normal);
            return node_result_1;
        }
        break;
    case mi::mdl::DS_DIST_BSDF_COLOR_MIX_1: // match for bsdf_color_mix_1(w1, b [[ w ~ nw, normal ~ nl ]])
// 025_local_normal.mdltl:21
//RUID 508272
        if (true
        && (e.attribute_exists(e.get_remapped_argument(node, 1), "w"))
        && (e.attribute_exists(e.get_remapped_argument(node, 1), "normal"))) {
            const DAG_node* v_w1 = e.get_remapped_argument(node, 0);
            const DAG_node* v_b = e.get_remapped_argument(node, 1);
            const DAG_node *vv_0_w = e.get_attribute(e.get_remapped_argument(node, 1), "w");
            const DAG_node* v_nw = vv_0_w;
            const DAG_node *vv_1_normal = e.get_attribute(e.get_remapped_argument(node, 1), "normal");
            const DAG_node* v_nl = vv_1_normal;
            if (event_handler != nullptr)
                fire_match_event(*event_handler, 1);
            DAG_node const *node_result_9 = e.create_color_mixer_call(Args_wrapper<2>::mk_args(e,m_node_types,
                        node_null, v_w1, v_b).args,
                    2);
            DAG_node const *node_result_9_w = e.create_binary(
                IDistiller_plugin_api::OK_MULTIPLY,
                    e.create_function_call("::math::luminance", Nodes_wrapper<1>(v_w1).data(),
                        1),
                    v_nw);
            e.set_attribute(node_result_9, "w",node_result_9_w);
            DAG_node const *node_result_9_normal = v_nl;
            e.set_attribute(node_result_9, "normal",node_result_9_normal);
            return node_result_9;
        }
        break;
    case mi::mdl::DS_DIST_BSDF_COLOR_MIX_2: // match for bsdf_color_mix_2(w1, local_normal(nw1, nl1), w2, local_normal(nw2, nl2))
// 025_local_normal.mdltl:32
//RUID 145615
        if (true
        && (e.get_selector(e.get_remapped_argument(node, 1)) == mi::mdl::DS_DIST_LOCAL_NORMAL)
        && (e.get_selector(e.get_remapped_argument(node, 3)) == mi::mdl::DS_DIST_LOCAL_NORMAL)) {
            const DAG_node* v_w1 = e.get_remapped_argument(node, 0);
            const DAG_node* v_nw1 = e.get_compound_argument(e.get_remapped_argument(node, 1), 0);
            const DAG_node* v_nl1 = e.get_compound_argument(e.get_remapped_argument(node, 1), 1);
            const DAG_node* v_w2 = e.get_remapped_argument(node, 2);
            const DAG_node* v_nw2 = e.get_compound_argument(e.get_remapped_argument(node, 3), 0);
            const DAG_node* v_nl2 = e.get_compound_argument(e.get_remapped_argument(node, 3), 1);
            if (e.eval_if(e.create_binary(
                IDistiller_plugin_api::OK_EQUAL,
                    v_nl1,
                    v_nl2))) {
                if (event_handler != nullptr)
                    fire_match_event(*event_handler, 2);
                return e.create_call("::nvidia::distilling_support::local_normal(float,float3)",
                    IDefinition::DS_UNKNOWN, Args_wrapper<2>::mk_args(e,m_node_types,
                        local_normal, e.create_binary(
                        IDistiller_plugin_api::OK_PLUS,
                            e.create_binary(
                            IDistiller_plugin_api::OK_MULTIPLY,
                                e.create_function_call("::math::luminance", Nodes_wrapper<1>(v_w1).data(),
                                    1),
                                v_nw1),
                            e.create_binary(
                            IDistiller_plugin_api::OK_MULTIPLY,
                                e.create_function_call("::math::luminance", Nodes_wrapper<1>(v_w2).data(),
                                    1),
                                v_nw2)), v_nl1).args, 2, e.get_type_factory()->create_color());
            }
        }
// 025_local_normal.mdltl:35
//RUID 25734
        if (true
        && (e.get_selector(e.get_remapped_argument(node, 1)) == mi::mdl::DS_DIST_LOCAL_NORMAL)
        && (e.get_selector(e.get_remapped_argument(node, 3)) == mi::mdl::DS_DIST_LOCAL_NORMAL)) {
            const DAG_node* v_w1 = e.get_remapped_argument(node, 0);
            const DAG_node* v_nw1 = e.get_compound_argument(e.get_remapped_argument(node, 1), 0);
            const DAG_node* v_nl1 = e.get_compound_argument(e.get_remapped_argument(node, 1), 1);
            const DAG_node* v_w2 = e.get_remapped_argument(node, 2);
            const DAG_node* v_nw2 = e.get_compound_argument(e.get_remapped_argument(node, 3), 0);
            const DAG_node* v_nl2 = e.get_compound_argument(e.get_remapped_argument(node, 3), 1);
            DAG_node const* v_w2p = e.create_function_call("::math::luminance", Nodes_wrapper<1>(v_w2).data(),
                1);
            DAG_node const* v_w1p = e.create_function_call("::math::luminance", Nodes_wrapper<1>(v_w1).data(),
                1);
            if (event_handler != nullptr)
                fire_match_event(*event_handler, 3);
            return e.create_call("::nvidia::distilling_support::local_normal(float,float3)",
                IDefinition::DS_UNKNOWN, Args_wrapper<2>::mk_args(e,m_node_types,
                    local_normal, e.create_binary(
                    IDistiller_plugin_api::OK_PLUS,
                        e.create_binary(
                        IDistiller_plugin_api::OK_MULTIPLY,
                            v_w1p,
                            v_nw1),
                        e.create_binary(
                        IDistiller_plugin_api::OK_MULTIPLY,
                            v_w2p,
                            v_nw2)), e.create_function_call("::nvidia::distilling_support::affine_normal_sum",
                        Nodes_wrapper<4>(e.create_binary(
                            IDistiller_plugin_api::OK_MULTIPLY,
                                v_w1p,
                                v_nw1), v_nl1, e.create_binary(
                            IDistiller_plugin_api::OK_MULTIPLY,
                                v_w2p,
                                v_nw2), v_nl2).data(), 4)).args, 2, e.get_type_factory()->create_color());
        }
        break;
    case mi::mdl::DS_DIST_BSDF_COLOR_MIX_3: // match for bsdf_color_mix_3(w1, local_normal(nw1, nl1), w2, local_normal(nw2, nl2), w3, local_normal(nw3, nl3))
// 025_local_normal.mdltl:53
//RUID 101806
        if (true
        && (e.get_selector(e.get_remapped_argument(node, 1)) == mi::mdl::DS_DIST_LOCAL_NORMAL)
        && (e.get_selector(e.get_remapped_argument(node, 3)) == mi::mdl::DS_DIST_LOCAL_NORMAL)
        && (e.get_selector(e.get_remapped_argument(node, 5)) == mi::mdl::DS_DIST_LOCAL_NORMAL)) {
            const DAG_node* v_w1 = e.get_remapped_argument(node, 0);
            const DAG_node* v_nw1 = e.get_compound_argument(e.get_remapped_argument(node, 1), 0);
            const DAG_node* v_nl1 = e.get_compound_argument(e.get_remapped_argument(node, 1), 1);
            const DAG_node* v_w2 = e.get_remapped_argument(node, 2);
            const DAG_node* v_nw2 = e.get_compound_argument(e.get_remapped_argument(node, 3), 0);
            const DAG_node* v_nl2 = e.get_compound_argument(e.get_remapped_argument(node, 3), 1);
            const DAG_node* v_w3 = e.get_remapped_argument(node, 4);
            const DAG_node* v_nw3 = e.get_compound_argument(e.get_remapped_argument(node, 5), 0);
            const DAG_node* v_nl3 = e.get_compound_argument(e.get_remapped_argument(node, 5), 1);
            if (e.eval_if(e.create_binary(
                IDistiller_plugin_api::OK_LOGICAL_AND,
                    e.create_binary(
                    IDistiller_plugin_api::OK_EQUAL,
                        v_nl1,
                        v_nl2),
                    e.create_binary(
                    IDistiller_plugin_api::OK_EQUAL,
                        v_nl1,
                        v_nl3)))) {
                if (event_handler != nullptr)
                    fire_match_event(*event_handler, 4);
                return e.create_call("::nvidia::distilling_support::local_normal(float,float3)",
                    IDefinition::DS_UNKNOWN, Args_wrapper<2>::mk_args(e,m_node_types,
                        local_normal, e.create_binary(
                        IDistiller_plugin_api::OK_PLUS,
                            e.create_binary(
                            IDistiller_plugin_api::OK_PLUS,
                                e.create_binary(
                                IDistiller_plugin_api::OK_MULTIPLY,
                                    e.create_function_call("::math::luminance", Nodes_wrapper<1>(v_w1).data(),
                                        1),
                                    v_nw1),
                                e.create_binary(
                                IDistiller_plugin_api::OK_MULTIPLY,
                                    e.create_function_call("::math::luminance", Nodes_wrapper<1>(v_w2).data(),
                                        1),
                                    v_nw2)),
                            e.create_binary(
                            IDistiller_plugin_api::OK_MULTIPLY,
                                e.create_function_call("::math::luminance", Nodes_wrapper<1>(v_w3).data(),
                                    1),
                                v_nw3)), v_nl1).args, 2, e.get_type_factory()->create_color());
            }
        }
// 025_local_normal.mdltl:59
//RUID 964281
        if (true
        && (e.get_selector(e.get_remapped_argument(node, 1)) == mi::mdl::DS_DIST_LOCAL_NORMAL)
        && (e.get_selector(e.get_remapped_argument(node, 3)) == mi::mdl::DS_DIST_LOCAL_NORMAL)
        && (e.get_selector(e.get_remapped_argument(node, 5)) == mi::mdl::DS_DIST_LOCAL_NORMAL)) {
            const DAG_node* v_w1 = e.get_remapped_argument(node, 0);
            const DAG_node* v_nw1 = e.get_compound_argument(e.get_remapped_argument(node, 1), 0);
            const DAG_node* v_nl1 = e.get_compound_argument(e.get_remapped_argument(node, 1), 1);
            const DAG_node* v_w2 = e.get_remapped_argument(node, 2);
            const DAG_node* v_nw2 = e.get_compound_argument(e.get_remapped_argument(node, 3), 0);
            const DAG_node* v_nl2 = e.get_compound_argument(e.get_remapped_argument(node, 3), 1);
            const DAG_node* v_w3 = e.get_remapped_argument(node, 4);
            const DAG_node* v_nw3 = e.get_compound_argument(e.get_remapped_argument(node, 5), 0);
            const DAG_node* v_nl3 = e.get_compound_argument(e.get_remapped_argument(node, 5), 1);
            DAG_node const* v_w3p = e.create_function_call("::math::luminance", Nodes_wrapper<1>(v_w3).data(),
                1);
            DAG_node const* v_w2p = e.create_function_call("::math::luminance", Nodes_wrapper<1>(v_w2).data(),
                1);
            DAG_node const* v_w1p = e.create_function_call("::math::luminance", Nodes_wrapper<1>(v_w1).data(),
                1);
            if (event_handler != nullptr)
                fire_match_event(*event_handler, 5);
            return e.create_call("::nvidia::distilling_support::local_normal(float,float3)",
                IDefinition::DS_UNKNOWN, Args_wrapper<2>::mk_args(e,m_node_types,
                    local_normal, e.create_binary(
                    IDistiller_plugin_api::OK_PLUS,
                        e.create_binary(
                        IDistiller_plugin_api::OK_PLUS,
                            e.create_binary(
                            IDistiller_plugin_api::OK_MULTIPLY,
                                v_w1p,
                                v_nw1),
                            e.create_binary(
                            IDistiller_plugin_api::OK_MULTIPLY,
                                v_w2p,
                                v_nw2)),
                        e.create_binary(
                        IDistiller_plugin_api::OK_MULTIPLY,
                            v_w3p,
                            v_nw3)), e.create_function_call("::nvidia::distilling_support::affine_normal_sum",
                        Nodes_wrapper<6>(e.create_binary(
                            IDistiller_plugin_api::OK_MULTIPLY,
                                v_w1p,
                                v_nw1), v_nl1, e.create_binary(
                            IDistiller_plugin_api::OK_MULTIPLY,
                                v_w2p,
                                v_nw2), v_nl2, e.create_binary(
                            IDistiller_plugin_api::OK_MULTIPLY,
                                v_w3p,
                                v_nw3), v_nl3).data(), 6)).args, 2, e.get_type_factory()->create_color());
        }
        break;
    case mi::mdl::DS_DIST_BSDF_MIX_1: // match for bsdf_mix_1(w1, b [[ w ~ nw, normal ~ nl ]])
// 025_local_normal.mdltl:18
//RUID 3826
        if (true
        && (e.attribute_exists(e.get_remapped_argument(node, 1), "w"))
        && (e.attribute_exists(e.get_remapped_argument(node, 1), "normal"))) {
            const DAG_node* v_w1 = e.get_remapped_argument(node, 0);
            const DAG_node* v_b = e.get_remapped_argument(node, 1);
            const DAG_node *vv_0_w = e.get_attribute(e.get_remapped_argument(node, 1), "w");
            const DAG_node* v_nw = vv_0_w;
            const DAG_node *vv_1_normal = e.get_attribute(e.get_remapped_argument(node, 1), "normal");
            const DAG_node* v_nl = vv_1_normal;
            if (event_handler != nullptr)
                fire_match_event(*event_handler, 6);
            DAG_node const *node_result_7 = e.create_mixer_call(Args_wrapper<2>::mk_args(e,m_node_types,
                        node_null, v_w1, v_b).args,
                    2);
            DAG_node const *node_result_7_w = e.create_binary(
                IDistiller_plugin_api::OK_MULTIPLY,
                    v_w1,
                    v_nw);
            e.set_attribute(node_result_7, "w",node_result_7_w);
            DAG_node const *node_result_7_normal = v_nl;
            e.set_attribute(node_result_7, "normal",node_result_7_normal);
            return node_result_7;
        }
        break;
    case mi::mdl::DS_DIST_BSDF_MIX_2: // match for bsdf_mix_2(w1, b1 [[ w ~ nw1, normal ~ nl1 ]], w2, b2 [[ w ~ nw2, normal ~ nl2 ]])
// 025_local_normal.mdltl:24
//RUID 453886
        if (true
        && (e.attribute_exists(e.get_remapped_argument(node, 1), "w"))
        && (e.attribute_exists(e.get_remapped_argument(node, 1), "normal"))
        && (e.attribute_exists(e.get_remapped_argument(node, 3), "w"))
        && (e.attribute_exists(e.get_remapped_argument(node, 3), "normal"))) {
            const DAG_node* v_w1 = e.get_remapped_argument(node, 0);
            const DAG_node* v_b1 = e.get_remapped_argument(node, 1);
            const DAG_node *vv_0_w = e.get_attribute(e.get_remapped_argument(node, 1), "w");
            const DAG_node* v_nw1 = vv_0_w;
            const DAG_node *vv_1_normal = e.get_attribute(e.get_remapped_argument(node, 1), "normal");
            const DAG_node* v_nl1 = vv_1_normal;
            const DAG_node* v_w2 = e.get_remapped_argument(node, 2);
            const DAG_node* v_b2 = e.get_remapped_argument(node, 3);
            const DAG_node *vv_2_w = e.get_attribute(e.get_remapped_argument(node, 3), "w");
            const DAG_node* v_nw2 = vv_2_w;
            const DAG_node *vv_3_normal = e.get_attribute(e.get_remapped_argument(node, 3), "normal");
            const DAG_node* v_nl2 = vv_3_normal;
            if (e.eval_if(e.create_binary(
                IDistiller_plugin_api::OK_EQUAL,
                    v_nl1,
                    v_nl2))) {
                if (event_handler != nullptr)
                    fire_match_event(*event_handler, 7);
                DAG_node const *node_result_12 = e.create_mixer_call(Args_wrapper<4>::mk_args(e,m_node_types,
                            node_null, v_w1, v_b1, v_w2, v_b2).args,
                        4);
                DAG_node const *node_result_12_w = e.create_binary(
                    IDistiller_plugin_api::OK_PLUS,
                        e.create_binary(
                        IDistiller_plugin_api::OK_MULTIPLY,
                            v_w1,
                            v_nw1),
                        e.create_binary(
                        IDistiller_plugin_api::OK_MULTIPLY,
                            v_w2,
                            v_nw2));
                e.set_attribute(node_result_12, "w",node_result_12_w);
                DAG_node const *node_result_12_normal = v_nl1;
                e.set_attribute(node_result_12, "normal",node_result_12_normal);
                return node_result_12;
            }
        }
// 025_local_normal.mdltl:27
//RUID 581897
        if (true
        && (e.attribute_exists(e.get_remapped_argument(node, 1), "w"))
        && (e.attribute_exists(e.get_remapped_argument(node, 1), "normal"))
        && (e.attribute_exists(e.get_remapped_argument(node, 3), "w"))
        && (e.attribute_exists(e.get_remapped_argument(node, 3), "normal"))) {
            const DAG_node* v_w1 = e.get_remapped_argument(node, 0);
            const DAG_node* v_b1 = e.get_remapped_argument(node, 1);
            const DAG_node *vv_0_w = e.get_attribute(e.get_remapped_argument(node, 1), "w");
            const DAG_node* v_nw1 = vv_0_w;
            const DAG_node *vv_1_normal = e.get_attribute(e.get_remapped_argument(node, 1), "normal");
            const DAG_node* v_nl1 = vv_1_normal;
            const DAG_node* v_w2 = e.get_remapped_argument(node, 2);
            const DAG_node* v_b2 = e.get_remapped_argument(node, 3);
            const DAG_node *vv_2_w = e.get_attribute(e.get_remapped_argument(node, 3), "w");
            const DAG_node* v_nw2 = vv_2_w;
            const DAG_node *vv_3_normal = e.get_attribute(e.get_remapped_argument(node, 3), "normal");
            const DAG_node* v_nl2 = vv_3_normal;
            if (event_handler != nullptr)
                fire_match_event(*event_handler, 8);
            DAG_node const *node_result_15 = e.create_mixer_call(Args_wrapper<4>::mk_args(e,m_node_types,
                        node_null, v_w1, v_b1, v_w2, v_b2).args,
                    4);
            DAG_node const *node_result_15_w = e.create_binary(
                IDistiller_plugin_api::OK_PLUS,
                    e.create_binary(
                    IDistiller_plugin_api::OK_MULTIPLY,
                        v_w1,
                        v_nw1),
                    e.create_binary(
                    IDistiller_plugin_api::OK_MULTIPLY,
                        v_w2,
                        v_nw2));
            e.set_attribute(node_result_15, "w",node_result_15_w);
            DAG_node const *node_result_15_normal = e.create_function_call("::nvidia::distilling_support::affine_normal_sum",
                    Nodes_wrapper<4>(e.create_binary(
                        IDistiller_plugin_api::OK_MULTIPLY,
                            v_w1,
                            v_nw1), v_nl1, e.create_binary(
                        IDistiller_plugin_api::OK_MULTIPLY,
                            v_w2,
                            v_nw2), v_nl2).data(), 4);
            e.set_attribute(node_result_15, "normal",node_result_15_normal);
            return node_result_15;
        }
        break;
    case mi::mdl::DS_DIST_BSDF_MIX_3: // match for bsdf_mix_3(w1, local_normal(nw1, nl1), w2, local_normal(nw2, nl2), w3, local_normal(nw3, nl3))
// 025_local_normal.mdltl:42
//RUID 678443
        if (true
        && (e.get_selector(e.get_remapped_argument(node, 1)) == mi::mdl::DS_DIST_LOCAL_NORMAL)
        && (e.get_selector(e.get_remapped_argument(node, 3)) == mi::mdl::DS_DIST_LOCAL_NORMAL)
        && (e.get_selector(e.get_remapped_argument(node, 5)) == mi::mdl::DS_DIST_LOCAL_NORMAL)) {
            const DAG_node* v_w1 = e.get_remapped_argument(node, 0);
            const DAG_node* v_nw1 = e.get_compound_argument(e.get_remapped_argument(node, 1), 0);
            const DAG_node* v_nl1 = e.get_compound_argument(e.get_remapped_argument(node, 1), 1);
            const DAG_node* v_w2 = e.get_remapped_argument(node, 2);
            const DAG_node* v_nw2 = e.get_compound_argument(e.get_remapped_argument(node, 3), 0);
            const DAG_node* v_nl2 = e.get_compound_argument(e.get_remapped_argument(node, 3), 1);
            const DAG_node* v_w3 = e.get_remapped_argument(node, 4);
            const DAG_node* v_nw3 = e.get_compound_argument(e.get_remapped_argument(node, 5), 0);
            const DAG_node* v_nl3 = e.get_compound_argument(e.get_remapped_argument(node, 5), 1);
            if (e.eval_if(e.create_binary(
                IDistiller_plugin_api::OK_LOGICAL_AND,
                    e.create_binary(
                    IDistiller_plugin_api::OK_EQUAL,
                        v_nl1,
                        v_nl2),
                    e.create_binary(
                    IDistiller_plugin_api::OK_EQUAL,
                        v_nl1,
                        v_nl3)))) {
                if (event_handler != nullptr)
                    fire_match_event(*event_handler, 9);
                return e.create_call("::nvidia::distilling_support::local_normal(float,float3)",
                    IDefinition::DS_UNKNOWN, Args_wrapper<2>::mk_args(e,m_node_types,
                        local_normal, e.create_binary(
                        IDistiller_plugin_api::OK_PLUS,
                            e.create_binary(
                            IDistiller_plugin_api::OK_PLUS,
                                e.create_binary(
                                IDistiller_plugin_api::OK_MULTIPLY,
                                    v_w1,
                                    v_nw1),
                                e.create_binary(
                                IDistiller_plugin_api::OK_MULTIPLY,
                                    v_w2,
                                    v_nw2)),
                            e.create_binary(
                            IDistiller_plugin_api::OK_MULTIPLY,
                                v_w3,
                                v_nw3)), v_nl1).args, 2, e.get_type_factory()->create_color());
            }
        }
// 025_local_normal.mdltl:47
//RUID 122547
        if (true
        && (e.get_selector(e.get_remapped_argument(node, 1)) == mi::mdl::DS_DIST_LOCAL_NORMAL)
        && (e.get_selector(e.get_remapped_argument(node, 3)) == mi::mdl::DS_DIST_LOCAL_NORMAL)
        && (e.get_selector(e.get_remapped_argument(node, 5)) == mi::mdl::DS_DIST_LOCAL_NORMAL)) {
            const DAG_node* v_w1 = e.get_remapped_argument(node, 0);
            const DAG_node* v_nw1 = e.get_compound_argument(e.get_remapped_argument(node, 1), 0);
            const DAG_node* v_nl1 = e.get_compound_argument(e.get_remapped_argument(node, 1), 1);
            const DAG_node* v_w2 = e.get_remapped_argument(node, 2);
            const DAG_node* v_nw2 = e.get_compound_argument(e.get_remapped_argument(node, 3), 0);
            const DAG_node* v_nl2 = e.get_compound_argument(e.get_remapped_argument(node, 3), 1);
            const DAG_node* v_w3 = e.get_remapped_argument(node, 4);
            const DAG_node* v_nw3 = e.get_compound_argument(e.get_remapped_argument(node, 5), 0);
            const DAG_node* v_nl3 = e.get_compound_argument(e.get_remapped_argument(node, 5), 1);
            if (event_handler != nullptr)
                fire_match_event(*event_handler, 10);
            return e.create_call("::nvidia::distilling_support::local_normal(float,float3)",
                IDefinition::DS_UNKNOWN, Args_wrapper<2>::mk_args(e,m_node_types,
                    local_normal, e.create_binary(
                    IDistiller_plugin_api::OK_PLUS,
                        e.create_binary(
                        IDistiller_plugin_api::OK_PLUS,
                            e.create_binary(
                            IDistiller_plugin_api::OK_MULTIPLY,
                                v_w1,
                                v_nw1),
                            e.create_binary(
                            IDistiller_plugin_api::OK_MULTIPLY,
                                v_w2,
                                v_nw2)),
                        e.create_binary(
                        IDistiller_plugin_api::OK_MULTIPLY,
                            v_w3,
                            v_nw3)), e.create_function_call("::nvidia::distilling_support::affine_normal_sum",
                        Nodes_wrapper<6>(e.create_binary(
                            IDistiller_plugin_api::OK_MULTIPLY,
                                v_w1,
                                v_nw1), v_nl1, e.create_binary(
                            IDistiller_plugin_api::OK_MULTIPLY,
                                v_w2,
                                v_nw2), v_nl2, e.create_binary(
                            IDistiller_plugin_api::OK_MULTIPLY,
                                v_w3,
                                v_nw3), v_nl3).data(), 6)).args, 2, e.get_type_factory()->create_color());
        }
        break;
    case mi::mdl::IDefinition::Semantics::DS_INTRINSIC_DF_COLOR_FRESNEL_LAYER: // match for color_fresnel_layer(_, w0, local_normal(_, nl1), local_normal(nw2, nl2), n)
// 025_local_normal.mdltl:91
//RUID 80129
        if (true
        && (e.get_selector(e.get_compound_argument(node, 2)) == mi::mdl::DS_DIST_LOCAL_NORMAL)
        && (e.get_selector(e.get_compound_argument(node, 3)) == mi::mdl::DS_DIST_LOCAL_NORMAL)) {
            const DAG_node* v_w0 = e.get_compound_argument(node, 1);
            const DAG_node* v_nl1 = e.get_compound_argument(e.get_compound_argument(node, 2), 1);
            const DAG_node* v_nw2 = e.get_compound_argument(e.get_compound_argument(node, 3), 0);
            const DAG_node* v_nl2 = e.get_compound_argument(e.get_compound_argument(node, 3), 1);
            const DAG_node* v_n = e.get_compound_argument(node, 4);
            DAG_node const* v_w = e.create_binary(
            IDistiller_plugin_api::OK_MULTIPLY,
                e.create_function_call("::math::luminance", Nodes_wrapper<1>(v_w0).data(),
                    1),
                e.create_float_constant(options->top_layer_weight));
            if (e.eval_if(e.create_binary(
                IDistiller_plugin_api::OK_LOGICAL_AND,
                    e.create_binary(
                    IDistiller_plugin_api::OK_EQUAL,
                        v_n,
                        v_nl1),
                    e.create_binary(
                    IDistiller_plugin_api::OK_EQUAL,
                        v_n,
                        v_nl2)))) {
                if (event_handler != nullptr)
                    fire_match_event(*event_handler, 11);
                return e.create_call("::nvidia::distilling_support::local_normal(float,float3)",
                    IDefinition::DS_UNKNOWN, Args_wrapper<2>::mk_args(e,m_node_types,
                        local_normal, e.create_binary(
                        IDistiller_plugin_api::OK_PLUS,
                            e.create_binary(
                            IDistiller_plugin_api::OK_MULTIPLY,
                                v_nw2,
                                e.create_binary(
                                IDistiller_plugin_api::OK_MINUS,
                                    e.create_float_constant(1.0f),
                                    v_w)),
                            v_w), v_n).args, 2, e.get_type_factory()->create_color());
            }
        }
// 025_local_normal.mdltl:96
//RUID 904231
        if (true
        && (e.get_selector(e.get_compound_argument(node, 2)) == mi::mdl::DS_DIST_LOCAL_NORMAL)
        && (e.get_selector(e.get_compound_argument(node, 3)) == mi::mdl::DS_DIST_LOCAL_NORMAL)) {
            const DAG_node* v_w0 = e.get_compound_argument(node, 1);
            const DAG_node* v_nw1 = e.get_compound_argument(e.get_compound_argument(node, 2), 0);
            const DAG_node* v_nl1 = e.get_compound_argument(e.get_compound_argument(node, 2), 1);
            const DAG_node* v_nw2 = e.get_compound_argument(e.get_compound_argument(node, 3), 0);
            const DAG_node* v_nl2 = e.get_compound_argument(e.get_compound_argument(node, 3), 1);
            const DAG_node* v_n = e.get_compound_argument(node, 4);
            DAG_node const* v_w = e.create_binary(
            IDistiller_plugin_api::OK_MULTIPLY,
                e.create_function_call("::math::luminance", Nodes_wrapper<1>(v_w0).data(),
                    1),
                e.create_float_constant(options->top_layer_weight));
            if (event_handler != nullptr)
                fire_match_event(*event_handler, 12);
            return e.create_call("::nvidia::distilling_support::local_normal(float,float3)",
                IDefinition::DS_UNKNOWN, Args_wrapper<2>::mk_args(e,m_node_types,
                    local_normal, e.create_binary(
                    IDistiller_plugin_api::OK_PLUS,
                        e.create_binary(
                        IDistiller_plugin_api::OK_MULTIPLY,
                            v_nw2,
                            e.create_binary(
                            IDistiller_plugin_api::OK_MINUS,
                                e.create_float_constant(1.0f),
                                v_w)),
                        v_w), e.create_function_call("::nvidia::distilling_support::affine_normal_sum",
                        Nodes_wrapper<6>(e.create_binary(
                            IDistiller_plugin_api::OK_MULTIPLY,
                                e.create_binary(
                                IDistiller_plugin_api::OK_MINUS,
                                    e.create_float_constant(1.0f),
                                    v_w),
                                v_nw2), v_nl2, e.create_binary(
                            IDistiller_plugin_api::OK_MULTIPLY,
                                v_w,
                                e.create_binary(
                                IDistiller_plugin_api::OK_MINUS,
                                    e.create_float_constant(1.0f),
                                    v_nw1)), v_n, e.create_binary(
                            IDistiller_plugin_api::OK_MULTIPLY,
                                v_w,
                                v_nw1), v_nl1).data(), 6)).args, 2, e.get_type_factory()->create_color());
        }
        break;
    case mi::mdl::IDefinition::Semantics::DS_INTRINSIC_DF_COLOR_WEIGHTED_LAYER: // match for color_weighted_layer(this_w, local_normal(_, nl1), local_normal(nw2, nl2), n)
// 025_local_normal.mdltl:73
//RUID 534396
        if (true
        && (e.get_selector(e.get_compound_argument(node, 1)) == mi::mdl::DS_DIST_LOCAL_NORMAL)
        && (e.get_selector(e.get_compound_argument(node, 2)) == mi::mdl::DS_DIST_LOCAL_NORMAL)) {
            const DAG_node* v_this_w = e.get_compound_argument(node, 0);
            const DAG_node* v_nl1 = e.get_compound_argument(e.get_compound_argument(node, 1), 1);
            const DAG_node* v_nw2 = e.get_compound_argument(e.get_compound_argument(node, 2), 0);
            const DAG_node* v_nl2 = e.get_compound_argument(e.get_compound_argument(node, 2), 1);
            const DAG_node* v_n = e.get_compound_argument(node, 3);
            if (e.eval_if(e.create_binary(
                IDistiller_plugin_api::OK_LOGICAL_AND,
                    e.create_binary(
                    IDistiller_plugin_api::OK_EQUAL,
                        v_n,
                        v_nl1),
                    e.create_binary(
                    IDistiller_plugin_api::OK_EQUAL,
                        v_n,
                        v_nl2)))) {
                if (event_handler != nullptr)
                    fire_match_event(*event_handler, 13);
                return e.create_call("::nvidia::distilling_support::local_normal(float,float3)",
                    IDefinition::DS_UNKNOWN, Args_wrapper<2>::mk_args(e,m_node_types,
                        local_normal, e.create_binary(
                        IDistiller_plugin_api::OK_PLUS,
                            e.create_binary(
                            IDistiller_plugin_api::OK_MULTIPLY,
                                v_nw2,
                                e.create_binary(
                                IDistiller_plugin_api::OK_MINUS,
                                    e.create_float_constant(1.0f),
                                    e.create_function_call("::math::luminance", Nodes_wrapper<1>(v_this_w).data(),
                                        1))),
                            e.create_function_call("::math::luminance", Nodes_wrapper<1>(v_this_w).data(),
                                1)), v_n).args, 2, e.get_type_factory()->create_color());
            }
        }
// 025_local_normal.mdltl:76
//RUID 312088
        if (true
        && (e.get_selector(e.get_compound_argument(node, 1)) == mi::mdl::DS_DIST_LOCAL_NORMAL)
        && (e.get_selector(e.get_compound_argument(node, 2)) == mi::mdl::DS_DIST_LOCAL_NORMAL)) {
            const DAG_node* v_this_w = e.get_compound_argument(node, 0);
            const DAG_node* v_nw1 = e.get_compound_argument(e.get_compound_argument(node, 1), 0);
            const DAG_node* v_nl1 = e.get_compound_argument(e.get_compound_argument(node, 1), 1);
            const DAG_node* v_nw2 = e.get_compound_argument(e.get_compound_argument(node, 2), 0);
            const DAG_node* v_nl2 = e.get_compound_argument(e.get_compound_argument(node, 2), 1);
            const DAG_node* v_n = e.get_compound_argument(node, 3);
            DAG_node const* v_wp = e.create_function_call("::math::luminance", Nodes_wrapper<1>(v_this_w).data(),
                1);
            if (event_handler != nullptr)
                fire_match_event(*event_handler, 14);
            return e.create_call("::nvidia::distilling_support::local_normal(float,float3)",
                IDefinition::DS_UNKNOWN, Args_wrapper<2>::mk_args(e,m_node_types,
                    local_normal, e.create_binary(
                    IDistiller_plugin_api::OK_PLUS,
                        e.create_binary(
                        IDistiller_plugin_api::OK_MULTIPLY,
                            v_nw2,
                            e.create_binary(
                            IDistiller_plugin_api::OK_MINUS,
                                e.create_float_constant(1.0f),
                                v_wp)),
                        v_wp), e.create_function_call("::nvidia::distilling_support::affine_normal_sum",
                        Nodes_wrapper<6>(e.create_binary(
                            IDistiller_plugin_api::OK_MULTIPLY,
                                e.create_binary(
                                IDistiller_plugin_api::OK_MINUS,
                                    e.create_float_constant(1.0f),
                                    v_wp),
                                v_nw2), v_nl2, e.create_binary(
                            IDistiller_plugin_api::OK_MULTIPLY,
                                v_wp,
                                e.create_binary(
                                IDistiller_plugin_api::OK_MINUS,
                                    e.create_float_constant(1.0f),
                                    v_nw1)), v_n, e.create_binary(
                            IDistiller_plugin_api::OK_MULTIPLY,
                                v_wp,
                                v_nw1), v_nl1).data(), 6)).args, 2, e.get_type_factory()->create_color());
        }
        break;
    case mi::mdl::IDefinition::DS_INTRINSIC_DF_DIFFUSE_REFLECTION_BSDF: // match for diffuse_reflection_bsdf(t, r)
// 025_local_normal.mdltl:13
//RUID 398125
        if (true) {
            const DAG_node* v_t = e.get_compound_argument(node, 0);
            const DAG_node* v_r = e.get_compound_argument(node, 1);
            if (event_handler != nullptr)
                fire_match_event(*event_handler, 15);
            DAG_node const *node_result_2 = e.create_call("::df::diffuse_reflection_bsdf(color,float,string)",
                    IDefinition::DS_INTRINSIC_DF_DIFFUSE_REFLECTION_BSDF, Args_wrapper<3>::mk_args(
                        e,m_node_types, diffuse_reflection_bsdf, v_t, v_r).args,
                    3, e.get_type_factory()->create_bsdf());
            DAG_node const *node_result_2_w = e.create_float_constant(0.0f);
            e.set_attribute(node_result_2, "w",node_result_2_w);
            DAG_node const *node_result_2_normal = e.create_function_call("::state::normal",
                    Nodes_wrapper<0>().data(), 0);
            e.set_attribute(node_result_2, "normal",node_result_2_normal);
            return node_result_2;
        }
        break;
    case mi::mdl::IDefinition::DS_INTRINSIC_DF_DIFFUSE_TRANSMISSION_BSDF: // match for diffuse_transmission_bsdf(t)
// 025_local_normal.mdltl:14
//RUID 586592
        if (true) {
            const DAG_node* v_t = e.get_compound_argument(node, 0);
            if (event_handler != nullptr)
                fire_match_event(*event_handler, 16);
            DAG_node const *node_result_3 = e.create_call("::df::diffuse_transmission_bsdf(color,string)",
                    IDefinition::DS_INTRINSIC_DF_DIFFUSE_TRANSMISSION_BSDF, Args_wrapper<2>::mk_args(
                        e,m_node_types, diffuse_transmission_bsdf, v_t).args, 2,
                    e.get_type_factory()->create_bsdf());
            DAG_node const *node_result_3_w = e.create_float_constant(0.0f);
            e.set_attribute(node_result_3, "w",node_result_3_w);
            DAG_node const *node_result_3_normal = e.create_function_call("::state::normal",
                    Nodes_wrapper<0>().data(), 0);
            e.set_attribute(node_result_3, "normal",node_result_3_normal);
            return node_result_3;
        }
        break;
    case mi::mdl::IDefinition::Semantics::DS_INTRINSIC_DF_FRESNEL_LAYER: // match for fresnel_layer(ior, w0, layer [[ w ~ _, normal ~ nl1 ]], base [[ w ~ nw2, normal ~ nl2 ]], n)
// 025_local_normal.mdltl:82
//RUID 414430
        if (true
        && (e.get_selector(node) == mi::mdl::IDefinition::Semantics::DS_INTRINSIC_DF_FRESNEL_LAYER)
        && (e.attribute_exists(e.get_compound_argument(node, 2), "w"))
        && (e.attribute_exists(e.get_compound_argument(node, 2), "normal"))
        && (e.attribute_exists(e.get_compound_argument(node, 3), "w"))
        && (e.attribute_exists(e.get_compound_argument(node, 3), "normal"))
        && (e.attribute_exists(node, "w"))
        && (e.attribute_exists(node, "normal"))) {
            const DAG_node* v_ior = e.get_compound_argument(node, 0);
            const DAG_node* v_w0 = e.get_compound_argument(node, 1);
            const DAG_node* v_layer = e.get_compound_argument(node, 2);
            const DAG_node *vv_0_w = e.get_attribute(e.get_compound_argument(node, 2), "w");
            const DAG_node *vv_1_normal = e.get_attribute(e.get_compound_argument(node, 2), "normal");
            const DAG_node* v_nl1 = vv_1_normal;
            const DAG_node* v_base = e.get_compound_argument(node, 3);
            const DAG_node *vv_2_w = e.get_attribute(e.get_compound_argument(node, 3), "w");
            const DAG_node* v_nw2 = vv_2_w;
            const DAG_node *vv_3_normal = e.get_attribute(e.get_compound_argument(node, 3), "normal");
            const DAG_node* v_nl2 = vv_3_normal;
            const DAG_node* v_n = e.get_compound_argument(node, 4);
            const DAG_node *vv_4_w = e.get_attribute(node, "w");
            const DAG_node *vv_5_normal = e.get_attribute(node, "normal");
            DAG_node const* v_wght = e.create_binary(
            IDistiller_plugin_api::OK_MULTIPLY,
                v_w0,
                e.create_float_constant(options->top_layer_weight));
            if (e.eval_if(e.create_binary(
                IDistiller_plugin_api::OK_LOGICAL_AND,
                    e.create_binary(
                    IDistiller_plugin_api::OK_EQUAL,
                        v_n,
                        v_nl1),
                    e.create_binary(
                    IDistiller_plugin_api::OK_EQUAL,
                        v_n,
                        v_nl2)))) {
                if (event_handler != nullptr)
                    fire_match_event(*event_handler, 17);
                DAG_node const *node_result_19 = e.create_call("::df::fresnel_layer(float,float,bsdf,bsdf,float3)",
                        IDefinition::DS_INTRINSIC_DF_FRESNEL_LAYER, Args_wrapper<5>::mk_args(
                            e,m_node_types, fresnel_layer, v_ior, v_w0, v_layer,
                            v_base, v_n).args, 5, e.get_type_factory()->create_bsdf());
                DAG_node const *node_result_19_w = e.create_binary(
                    IDistiller_plugin_api::OK_PLUS,
                        e.create_binary(
                        IDistiller_plugin_api::OK_MULTIPLY,
                            v_nw2,
                            e.create_binary(
                            IDistiller_plugin_api::OK_MINUS,
                                e.create_float_constant(1.0f),
                                v_wght)),
                        v_w);
                e.set_attribute(node_result_19, "w",node_result_19_w);
                DAG_node const *node_result_19_normal = v_n;
                e.set_attribute(node_result_19, "normal",node_result_19_normal);
                return node_result_19;
            }
        }
// 025_local_normal.mdltl:86
//RUID 465076
        if (true
        && (e.attribute_exists(e.get_compound_argument(node, 2), "w"))
        && (e.attribute_exists(e.get_compound_argument(node, 2), "normal"))
        && (e.attribute_exists(e.get_compound_argument(node, 3), "w"))
        && (e.attribute_exists(e.get_compound_argument(node, 3), "normal"))) {
            const DAG_node* v_ior = e.get_compound_argument(node, 0);
            const DAG_node* v_w0 = e.get_compound_argument(node, 1);
            const DAG_node* v_layer = e.get_compound_argument(node, 2);
            const DAG_node *vv_0_w = e.get_attribute(e.get_compound_argument(node, 2), "w");
            const DAG_node* v_nw1 = vv_0_w;
            const DAG_node *vv_1_normal = e.get_attribute(e.get_compound_argument(node, 2), "normal");
            const DAG_node* v_nl1 = vv_1_normal;
            const DAG_node* v_base = e.get_compound_argument(node, 3);
            const DAG_node *vv_2_w = e.get_attribute(e.get_compound_argument(node, 3), "w");
            const DAG_node* v_nw2 = vv_2_w;
            const DAG_node *vv_3_normal = e.get_attribute(e.get_compound_argument(node, 3), "normal");
            const DAG_node* v_nl2 = vv_3_normal;
            const DAG_node* v_n = e.get_compound_argument(node, 4);
            DAG_node const* v_wght = e.create_binary(
            IDistiller_plugin_api::OK_MULTIPLY,
                v_w0,
                e.create_float_constant(options->top_layer_weight));
            if (event_handler != nullptr)
                fire_match_event(*event_handler, 18);
            DAG_node const *node_result_22 = e.create_call("::df::fresnel_layer(float,float,bsdf,bsdf,float3)",
                    IDefinition::DS_INTRINSIC_DF_FRESNEL_LAYER, Args_wrapper<5>::mk_args(
                        e,m_node_types, fresnel_layer, v_ior, v_w0, v_layer, v_base,
                        v_n).args, 5, e.get_type_factory()->create_bsdf());
            DAG_node const *node_result_22_w = e.create_binary(
                IDistiller_plugin_api::OK_PLUS,
                    e.create_binary(
                    IDistiller_plugin_api::OK_MULTIPLY,
                        v_nw2,
                        e.create_binary(
                        IDistiller_plugin_api::OK_MINUS,
                            e.create_float_constant(1.0f),
                            v_w)),
                    v_w);
            e.set_attribute(node_result_22, "w",node_result_22_w);
            DAG_node const *node_result_22_normal = e.create_function_call("::nvidia::distilling_support::affine_normal_sum",
                    Nodes_wrapper<6>(e.create_binary(
                        IDistiller_plugin_api::OK_MULTIPLY,
                            e.create_binary(
                            IDistiller_plugin_api::OK_MINUS,
                                e.create_float_constant(1.0f),
                                v_wght),
                            v_nw2), v_nl2, e.create_binary(
                        IDistiller_plugin_api::OK_MULTIPLY,
                            v_wght,
                            e.create_binary(
                            IDistiller_plugin_api::OK_MINUS,
                                e.create_float_constant(1.0f),
                                v_nw1)), v_n, e.create_binary(
                        IDistiller_plugin_api::OK_MULTIPLY,
                            v_wght,
                            v_nw1), v_nl1).data(), 6);
            e.set_attribute(node_result_22, "normal",node_result_22_normal);
            return node_result_22;
        }
        break;
    case mi::mdl::DS_DIST_STRUCT_MATERIAL: // match for material(tw, sf, bf, ior, vol, material_geometry(d, cutout, n), hair)
// 025_local_normal.mdltl:8
//RUID 535110
        if (true
        && (e.get_selector(node) == mi::mdl::DS_DIST_STRUCT_MATERIAL)
        && (e.get_selector(e.get_compound_argument(node, 5)) == mi::mdl::DS_DIST_STRUCT_MATERIAL_GEOMETRY)
        && (e.attribute_exists(node, "w"))
        && (e.attribute_exists(node, "normal"))) {
            const DAG_node* v_tw = e.get_compound_argument(node, 0);
            const DAG_node* v_sf = e.get_compound_argument(node, 1);
            const DAG_node* v_bf = e.get_compound_argument(node, 2);
            const DAG_node* v_ior = e.get_compound_argument(node, 3);
            const DAG_node* v_vol = e.get_compound_argument(node, 4);
            const DAG_node* v_d = e.get_compound_argument(e.get_compound_argument(node, 5), 0);
            const DAG_node* v_cutout = e.get_compound_argument(e.get_compound_argument(node, 5), 1);
            const DAG_node* v_n = e.get_compound_argument(e.get_compound_argument(node, 5), 2);
            const DAG_node* v_hair = e.get_compound_argument(node, 6);
            const DAG_node *vv_0_w = e.get_attribute(node, "w");
            const DAG_node *vv_1_normal = e.get_attribute(node, "normal");
            const DAG_node* v_nl = vv_1_normal;
            DAG_node const* v_nprime = e.create_function_call("::nvidia::distilling_support::add_detail_normal",
                Nodes_wrapper<2>(v_nl, v_n).data(), 2);
            if (e.eval_maybe_if(e.create_binary(
                IDistiller_plugin_api::OK_NOT_EQUAL,
                    v_n,
                    v_nl))) {
                if (event_handler != nullptr)
                    fire_match_event(*event_handler, 19);
                return e.create_call("material(bool,material_surface,material_surface,color,material_volume,material_geometry,hair_bsdf)",
                    IDefinition::DS_ELEM_CONSTRUCTOR, Args_wrapper<7>::mk_args(e,m_node_types,
                        material, v_tw, v_sf, v_bf, v_ior, v_vol, e.create_call("material_geometry(float3,float,float3)",
                            IDefinition::DS_ELEM_CONSTRUCTOR, Args_wrapper<3>::mk_args(
                                e,m_node_types, material_geometry, v_d, v_cutout,
                                v_nprime).args, 3, e.get_type_factory()->get_predefined_struct(
                            IType_struct::SID_MATERIAL_GEOMETRY)), v_hair).args,
                    7, e.get_type_factory()->get_predefined_struct(IType_struct::SID_MATERIAL));
            }
        }
        break;
    case mi::mdl::IDefinition::DS_INTRINSIC_DF_SIMPLE_GLOSSY_BSDF: // match for simple_glossy_bsdf(a, b, c, d, e)
// 025_local_normal.mdltl:17
//RUID 525261
        if (true) {
            const DAG_node* v_a = e.get_compound_argument(node, 0);
            const DAG_node* v_b = e.get_compound_argument(node, 1);
            const DAG_node* v_c = e.get_compound_argument(node, 2);
            const DAG_node* v_d = e.get_compound_argument(node, 3);
            const DAG_node* v_e = e.get_compound_argument(node, 4);
            if (event_handler != nullptr)
                fire_match_event(*event_handler, 20);
            DAG_node const *node_result_5 = e.create_call("::df::simple_glossy_bsdf(float,float,color,color,float3,::df::scatter_mode,string)",
                    IDefinition::DS_INTRINSIC_DF_SIMPLE_GLOSSY_BSDF, Args_wrapper<7>::mk_args(
                        e,m_node_types, simple_glossy_bsdf, v_a, v_b, v_c, v_d, v_e).args,
                    7, e.get_type_factory()->create_bsdf());
            DAG_node const *node_result_5_w = e.create_float_constant(0.0f);
            e.set_attribute(node_result_5, "w",node_result_5_w);
            DAG_node const *node_result_5_normal = e.create_function_call("::state::normal",
                    Nodes_wrapper<0>().data(), 0);
            e.set_attribute(node_result_5, "normal",node_result_5_normal);
            return node_result_5;
        }
        break;
    case mi::mdl::IDefinition::DS_INTRINSIC_DF_SPECULAR_BSDF: // match for specular_bsdf(c)
// 025_local_normal.mdltl:15
//RUID 364569
        if (true) {
            const DAG_node* v_c = e.get_compound_argument(node, 0);
            if (event_handler != nullptr)
                fire_match_event(*event_handler, 21);
            DAG_node const *node_result_4 = e.create_call("::df::specular_bsdf(color,::df::scatter_mode,string)",
                    IDefinition::DS_INTRINSIC_DF_SPECULAR_BSDF, Args_wrapper<3>::mk_args(
                        e,m_node_types, specular_bsdf, v_c).args, 3, e.get_type_factory()->create_bsdf());
            DAG_node const *node_result_4_w = e.create_float_constant(0.0f);
            e.set_attribute(node_result_4, "w",node_result_4_w);
            DAG_node const *node_result_4_normal = e.create_function_call("::state::normal",
                    Nodes_wrapper<0>().data(), 0);
            e.set_attribute(node_result_4, "normal",node_result_4_normal);
            return node_result_4;
        }
        break;
    case mi::mdl::IDefinition::Semantics::DS_INTRINSIC_DF_WEIGHTED_LAYER: // match for weighted_layer(this_w, local_normal(_, nl1), local_normal(nw2, nl2), n)
// 025_local_normal.mdltl:66
//RUID 316322
        if (true
        && (e.get_selector(e.get_compound_argument(node, 1)) == mi::mdl::DS_DIST_LOCAL_NORMAL)
        && (e.get_selector(e.get_compound_argument(node, 2)) == mi::mdl::DS_DIST_LOCAL_NORMAL)) {
            const DAG_node* v_this_w = e.get_compound_argument(node, 0);
            const DAG_node* v_nl1 = e.get_compound_argument(e.get_compound_argument(node, 1), 1);
            const DAG_node* v_nw2 = e.get_compound_argument(e.get_compound_argument(node, 2), 0);
            const DAG_node* v_nl2 = e.get_compound_argument(e.get_compound_argument(node, 2), 1);
            const DAG_node* v_n = e.get_compound_argument(node, 3);
            if (e.eval_if(e.create_binary(
                IDistiller_plugin_api::OK_LOGICAL_AND,
                    e.create_binary(
                    IDistiller_plugin_api::OK_EQUAL,
                        v_n,
                        v_nl1),
                    e.create_binary(
                    IDistiller_plugin_api::OK_EQUAL,
                        v_n,
                        v_nl2)))) {
                if (event_handler != nullptr)
                    fire_match_event(*event_handler, 22);
                return e.create_call("::nvidia::distilling_support::local_normal(float,float3)",
                    IDefinition::DS_UNKNOWN, Args_wrapper<2>::mk_args(e,m_node_types,
                        local_normal, e.create_binary(
                        IDistiller_plugin_api::OK_PLUS,
                            e.create_binary(
                            IDistiller_plugin_api::OK_MULTIPLY,
                                v_nw2,
                                e.create_binary(
                                IDistiller_plugin_api::OK_MINUS,
                                    e.create_float_constant(1.0f),
                                    v_this_w)),
                            v_this_w), v_n).args, 2, e.get_type_factory()->create_color());
            }
        }
// 025_local_normal.mdltl:69
//RUID 283983
        if (true
        && (e.get_selector(e.get_compound_argument(node, 1)) == mi::mdl::DS_DIST_LOCAL_NORMAL)
        && (e.get_selector(e.get_compound_argument(node, 2)) == mi::mdl::DS_DIST_LOCAL_NORMAL)) {
            const DAG_node* v_this_w = e.get_compound_argument(node, 0);
            const DAG_node* v_nw1 = e.get_compound_argument(e.get_compound_argument(node, 1), 0);
            const DAG_node* v_nl1 = e.get_compound_argument(e.get_compound_argument(node, 1), 1);
            const DAG_node* v_nw2 = e.get_compound_argument(e.get_compound_argument(node, 2), 0);
            const DAG_node* v_nl2 = e.get_compound_argument(e.get_compound_argument(node, 2), 1);
            const DAG_node* v_n = e.get_compound_argument(node, 3);
            if (event_handler != nullptr)
                fire_match_event(*event_handler, 23);
            return e.create_call("::nvidia::distilling_support::local_normal(float,float3)",
                IDefinition::DS_UNKNOWN, Args_wrapper<2>::mk_args(e,m_node_types,
                    local_normal, e.create_binary(
                    IDistiller_plugin_api::OK_PLUS,
                        e.create_binary(
                        IDistiller_plugin_api::OK_MULTIPLY,
                            v_nw2,
                            e.create_binary(
                            IDistiller_plugin_api::OK_MINUS,
                                e.create_float_constant(1.0f),
                                v_this_w)),
                        v_this_w), e.create_function_call("::nvidia::distilling_support::affine_normal_sum",
                        Nodes_wrapper<6>(e.create_binary(
                            IDistiller_plugin_api::OK_MULTIPLY,
                                e.create_binary(
                                IDistiller_plugin_api::OK_MINUS,
                                    e.create_float_constant(1.0f),
                                    v_this_w),
                                v_nw2), v_nl2, e.create_binary(
                            IDistiller_plugin_api::OK_MULTIPLY,
                                v_this_w,
                                e.create_binary(
                                IDistiller_plugin_api::OK_MINUS,
                                    e.create_float_constant(1.0f),
                                    v_nw1)), v_n, e.create_binary(
                            IDistiller_plugin_api::OK_MULTIPLY,
                                v_this_w,
                                v_nw1), v_nl1).data(), 6)).args, 2, e.get_type_factory()->create_color());
        }
        break;
    default:
        break;
    }

    return node;
}

bool Local_normal::postcond(
    IRule_matcher_event *event_handler,
    IDistiller_plugin_api &e,
    DAG_node const *root,
    const mi::mdl::Distiller_options *options) const
{
    (void)e; (void)root; // no unused variable warnings
    bool result = true;
    if (!result && event_handler != NULL)
        fire_postcondition_event(*event_handler);
    return result;
}

void Local_normal::fire_match_event(
    mi::mdl::IRule_matcher_event &event_handler,
    std::size_t id)
{
    Rule_info const &ri = g_rule_info[id];
    event_handler.rule_match_event("Local_normal", ri.ruid, ri.rname, ri.fname, ri.fline);
}

void Local_normal::fire_postcondition_event(
mi::mdl::IRule_matcher_event &event_handler)
{
    event_handler.postcondition_failed("Local_normal");
}

void Local_normal::fire_debug_print(
    mi::mdl::IDistiller_plugin_api &plugin_api,
    mi::mdl::IRule_matcher_event &event_handler,
    std::size_t idx,
    char const *var_name,
    DAG_node const *value)
{
    Rule_info const &ri = g_rule_info[idx];
    event_handler.debug_print(plugin_api, "Local_normal", ri.ruid, ri.rname, ri.fname,
        ri.fline, var_name, value);
}


// Rule info table.
Local_normal::Rule_info const Local_normal::g_rule_info[24] = {
    { 144237, "bsdf", "025_local_normal.mdltl", 12 },
    { 508272, "bsdf_color_mix_1", "025_local_normal.mdltl", 21 },
    { 145615, "bsdf_color_mix_2", "025_local_normal.mdltl", 32 },
    { 25734, "bsdf_color_mix_2", "025_local_normal.mdltl", 35 },
    { 101806, "bsdf_color_mix_3", "025_local_normal.mdltl", 53 },
    { 964281, "bsdf_color_mix_3", "025_local_normal.mdltl", 59 },
    { 3826, "bsdf_mix_1", "025_local_normal.mdltl", 18 },
    { 453886, "bsdf_mix_2", "025_local_normal.mdltl", 24 },
    { 581897, "bsdf_mix_2", "025_local_normal.mdltl", 27 },
    { 678443, "bsdf_mix_3", "025_local_normal.mdltl", 42 },
    { 122547, "bsdf_mix_3", "025_local_normal.mdltl", 47 },
    { 80129, "color_fresnel_layer", "025_local_normal.mdltl", 91 },
    { 904231, "color_fresnel_layer", "025_local_normal.mdltl", 96 },
    { 534396, "color_weighted_layer", "025_local_normal.mdltl", 73 },
    { 312088, "color_weighted_layer", "025_local_normal.mdltl", 76 },
    { 398125, "diffuse_reflection_bsdf", "025_local_normal.mdltl", 13 },
    { 586592, "diffuse_transmission_bsdf", "025_local_normal.mdltl", 14 },
    { 414430, "fresnel_layer", "025_local_normal.mdltl", 82 },
    { 465076, "fresnel_layer", "025_local_normal.mdltl", 86 },
    { 535110, "material", "025_local_normal.mdltl", 8 },
    { 525261, "simple_glossy_bsdf", "025_local_normal.mdltl", 17 },
    { 364569, "specular_bsdf", "025_local_normal.mdltl", 15 },
    { 316322, "weighted_layer", "025_local_normal.mdltl", 66 },
    { 283983, "weighted_layer", "025_local_normal.mdltl", 69 }
};


} // DIST
} // MI
// End of generated code
