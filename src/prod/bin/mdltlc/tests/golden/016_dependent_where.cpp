/******************************************************************************
 * Copyright (c) 2021-2024, NVIDIA CORPORATION. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *  * Neither the name of NVIDIA CORPORATION nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *****************************************************************************/
// Generated by mdltlc

#include "pch.h"

#include "016_dependent_where.h"

#include <mi/mdl/mdl_distiller_plugin_api.h>
#include <mi/mdl/mdl_distiller_plugin_helper.h>

using namespace mi::mdl;

namespace MI {
namespace DIST {

// Return the strategy to be used with this rule set.
Rule_eval_strategy Dependent_where_clauses::get_strategy() const {
    return RULE_EVAL_TOP_DOWN;
}

// Return the name of the rule set.
char const * Dependent_where_clauses::get_rule_set_name() const {
    return "Dependent_where_clauses";
}

// Return the number of imports of this rule set.
size_t Dependent_where_clauses::get_target_material_name_count() const {
    return 0;
}

// Return the name of the import at index i.
char const *Dependent_where_clauses::get_target_material_name(size_t i) const {
    return nullptr;
}

// Run the matcher.
DAG_node const* Dependent_where_clauses::matcher(
    IRule_matcher_event *event_handler,
    IDistiller_plugin_api &e,
    DAG_node const *node,
    const mi::mdl::Distiller_options *options,
    Rule_result_code &result_code)const
{
    switch (e.get_selector(node)) {
    case mi::mdl::IDefinition::DS_INTRINSIC_DF_DIFFUSE_REFLECTION_BSDF: // match for diffuse_reflection_bsdf(x)
// 016_dependent_where.mdltl:6
//RUID 134887
        if (true) {
            const DAG_node* v_x = e.get_compound_argument(node, 0);
            DAG_node const* v_a = v_x;
            DAG_node const* v__b = v_a;
            if (event_handler != nullptr)
                fire_match_event(*event_handler, 0);
            return e.create_bsdf_constant();
        }
        break;
    default:
        break;
    }

    return node;
}

bool Dependent_where_clauses::postcond(
    IRule_matcher_event *event_handler,
    IDistiller_plugin_api &e,
    DAG_node const *root,
    const mi::mdl::Distiller_options *options) const
{
    (void)e; (void)root; // no unused variable warnings
    bool result = true;
    if (!result && event_handler != NULL)
        fire_postcondition_event(*event_handler);
    return result;
}

void Dependent_where_clauses::fire_match_event(
    mi::mdl::IRule_matcher_event &event_handler,
    std::size_t id)
{
    Rule_info const &ri = g_rule_info[id];
    event_handler.rule_match_event("Dependent_where_clauses", ri.ruid, ri.rname,
        ri.fname, ri.fline);
}

void Dependent_where_clauses::fire_postcondition_event(
mi::mdl::IRule_matcher_event &event_handler)
{
    event_handler.postcondition_failed("Dependent_where_clauses");
}

void Dependent_where_clauses::fire_debug_print(
    mi::mdl::IDistiller_plugin_api &plugin_api,
    mi::mdl::IRule_matcher_event &event_handler,
    std::size_t idx,
    char const *var_name,
    DAG_node const *value)
{
    Rule_info const &ri = g_rule_info[idx];
    event_handler.debug_print(plugin_api, "Dependent_where_clauses", ri.ruid, ri.rname,
        ri.fname, ri.fline, var_name, value);
}


// Rule info table.
Dependent_where_clauses::Rule_info const Dependent_where_clauses::g_rule_info[1] = {
    { 134887, "diffuse_reflection_bsdf", "016_dependent_where.mdltl", 6 }
};


} // DIST
} // MI
// End of generated code
