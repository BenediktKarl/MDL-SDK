/******************************************************************************
 * Copyright (c) 2021-2025, NVIDIA CORPORATION. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *  * Neither the name of NVIDIA CORPORATION nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *****************************************************************************/
// Generated by mdltlc

#include "pch.h"

#include "008_numbers.h"

#include <mi/mdl/mdl_distiller_plugin_api.h>
#include <mi/mdl/mdl_distiller_plugin_helper.h>

using namespace mi::mdl;

namespace MI {
namespace DIST {

// Return the strategy to be used with this rule set.
Rule_eval_strategy Numbers::get_strategy() const {
    return RULE_EVAL_TOP_DOWN;
}

// Return the name of the rule set.
char const * Numbers::get_rule_set_name() const {
    return "Numbers";
}

// Return the number of imports of this rule set.
size_t Numbers::get_target_material_name_count() const {
    return 0;
}

// Return the name of the import at index i.
char const *Numbers::get_target_material_name(size_t i) const {
    return nullptr;
}

// Run the matcher.
DAG_node const* Numbers::matcher(
    IRule_matcher_event *event_handler,
    IDistiller_plugin_api &e,
    DAG_node const *node,
    const mi::mdl::Distiller_options *options,
    Rule_result_code &result_code) const
{
    auto match_rule2 = [&] (DAG_node const *node, IDistiller_plugin_api::Match_properties &node_props) -> const DAG_node * { return node; };

// 008_numbers.mdltl:8
//RUID 893157
    auto match_rule1 = [&] (DAG_node const *node1, IDistiller_plugin_api::Match_properties &node_props1) -> const DAG_node * {

        // match for diffuse_reflection_bsdf(_)
        if (node_props1.sema != IDefinition::DS_INTRINSIC_DF_DIFFUSE_REFLECTION_BSDF) {
            return match_rule2(node1, node_props1);
        }
        DAG_DbgInfo root_dbg_info = node1->get_dbg_info();
        (void) root_dbg_info;

        if (event_handler != nullptr)
            fire_match_event(*event_handler, 1);
        return e.create_call("::df::diffuse_reflection_bsdf(color,float,color,string)",
            IDefinition::DS_INTRINSIC_DF_DIFFUSE_REFLECTION_BSDF, Args_wrapper<4>::mk_args(
                e, m_node_types, diffuse_reflection_bsdf, e.create_binary(
                IDistiller_plugin_api::OK_PLUS,
                    e.create_function_call("::color", Nodes_wrapper<3>(e.create_binary(
                            IDistiller_plugin_api::OK_MULTIPLY,
                                e.create_float_constant(1.0f),
                                e.create_float_constant(3.0f)), e.create_float_constant(2.0f),
                            e.create_float_constant(3.0f)).data(), 3, root_dbg_info),
                    e.create_float_constant(5.0f))).args, 4, e.get_type_factory()->create_bsdf(), root_dbg_info);
    };
    (void)match_rule1;

// 008_numbers.mdltl:7
//RUID 34751
    auto match_rule0 = [&] (DAG_node const *node0, IDistiller_plugin_api::Match_properties &node_props0) -> const DAG_node * {

        // match for bsdf()
        if (node_props0.sema != IDefinition::DS_INVALID_REF_CONSTRUCTOR || node_props0.type_kind != IType::TK_BSDF) {
            return match_rule1(node0, node_props0);
        }
        DAG_DbgInfo root_dbg_info = node0->get_dbg_info();
        (void) root_dbg_info;

        if (event_handler != nullptr)
            fire_match_event(*event_handler, 0);
        return e.create_call("::df::diffuse_reflection_bsdf(color,float,color,string)",
            IDefinition::DS_INTRINSIC_DF_DIFFUSE_REFLECTION_BSDF, Args_wrapper<4>::mk_args(
                e, m_node_types, diffuse_reflection_bsdf, e.create_color_constant(23.23,23.23,23.23),
                e.create_float_constant(24.24f), e.create_color_constant(0,0,0),
                e.create_string_constant("\"test\"")).args, 4, e.get_type_factory()->create_bsdf(), root_dbg_info);
    };
    (void)match_rule0;

    IDistiller_plugin_api::Match_properties node_props;
    e.get_match_properties(node, node_props);
    return match_rule0(node, node_props);

}

bool Numbers::postcond(
    IRule_matcher_event *event_handler,
    IDistiller_plugin_api &e,
    DAG_node const *root,
    const mi::mdl::Distiller_options *options) const
{
    (void)e; (void)root; // no unused variable warnings
    bool result = true;
    if (!result && event_handler != NULL)
        fire_postcondition_event(*event_handler);
    return result;
}

void Numbers::fire_match_event(
    mi::mdl::IRule_matcher_event &event_handler,
    std::size_t id)
{
    Rule_info const &ri = g_rule_info[id];
    event_handler.rule_match_event("Numbers", ri.ruid, ri.rname, ri.fname, ri.fline);
}

void Numbers::fire_postcondition_event(
mi::mdl::IRule_matcher_event &event_handler)
{
    event_handler.postcondition_failed("Numbers");
}

void Numbers::fire_debug_print(
    mi::mdl::IDistiller_plugin_api &plugin_api,
    mi::mdl::IRule_matcher_event &event_handler,
    std::size_t idx,
    char const *var_name,
    DAG_node const *value)
{
    Rule_info const &ri = g_rule_info[idx];
    event_handler.debug_print(plugin_api, "Numbers", ri.ruid, ri.rname, ri.fname,
        ri.fline, var_name, value);
}


// Rule info table.
Numbers::Rule_info const Numbers::g_rule_info[2] = {
    { 34751, "bsdf", "008_numbers.mdltl", 7 },
    { 893157, "diffuse_reflection_bsdf", "008_numbers.mdltl", 8 }
};


} // DIST
} // MI
// End of generated code
