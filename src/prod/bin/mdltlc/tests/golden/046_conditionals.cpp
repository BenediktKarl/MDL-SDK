/******************************************************************************
 * Copyright (c) 2023-2024, NVIDIA CORPORATION. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *  * Neither the name of NVIDIA CORPORATION nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *****************************************************************************/
// Generated by mdltlc

#include "pch.h"

#include "046_conditionals.h"

#include <mi/mdl/mdl_distiller_plugin_api.h>
#include <mi/mdl/mdl_distiller_plugin_helper.h>

using namespace mi::mdl;

namespace MI {
namespace DIST {

// Return the strategy to be used with this rule set.
Rule_eval_strategy Conditionals::get_strategy() const {
    return RULE_EVAL_BOTTOM_UP;
}

// Return the name of the rule set.
char const * Conditionals::get_rule_set_name() const {
    return "Conditionals";
}

// Return the number of imports of this rule set.
size_t Conditionals::get_target_material_name_count() const {
    return 0;
}

// Return the name of the import at index i.
char const *Conditionals::get_target_material_name(size_t i) const {
    return nullptr;
}

// Run the matcher.
DAG_node const* Conditionals::matcher(
    IRule_matcher_event *event_handler,
    IDistiller_plugin_api &e,
    DAG_node const *node,
    const mi::mdl::Distiller_options *options,
    Rule_result_code &result_code)const
{
    switch (e.get_selector(node)) {
    case mi::mdl::DS_DIST_BSDF_TINT: // match for bsdf_tint(c, bsdf_conditional_operator(cond, bsdf1, bsdf2))
// 046_conditionals.mdltl:8
//RUID 117358
        if (true
        && (e.get_selector(e.get_compound_argument(node, 1)) == mi::mdl::DS_DIST_BSDF_CONDITIONAL_OPERATOR)) {
            const DAG_node* v_c = e.get_compound_argument(node, 0);
            const DAG_node* v_cond = e.get_compound_argument(e.get_compound_argument(node, 1), 0);
            const DAG_node* v_bsdf1 = e.get_compound_argument(e.get_compound_argument(node, 1), 1);
            const DAG_node* v_bsdf2 = e.get_compound_argument(e.get_compound_argument(node, 1), 2);
            if (event_handler != nullptr)
                fire_match_event(*event_handler, 0);
            result_code = RULE_REPEAT_RULES;
            return e.create_call("operator?(bool,<0>,<0>)(bool,bsdf,bsdf)", static_cast<mi::mdl::IDefinition::Semantics>(555),
                Args_wrapper<3>::mk_args(e,m_node_types, bsdf_conditional_operator,
                    v_cond, e.create_call("::df::tint(color,bsdf)", IDefinition::DS_INTRINSIC_DF_TINT,
                        Args_wrapper<2>::mk_args(e,m_node_types, bsdf_tint, v_c,
                            v_bsdf1).args, 2, e.get_type_factory()->create_bsdf()),
                    e.create_call("::df::tint(color,bsdf)", IDefinition::DS_INTRINSIC_DF_TINT,
                        Args_wrapper<2>::mk_args(e,m_node_types, bsdf_tint, v_c,
                            v_bsdf2).args, 2, e.get_type_factory()->create_bsdf())).args,
                3, e.get_type_factory()->create_bsdf());
        }
        break;
    default:
        break;
    }

    return node;
}

bool Conditionals::postcond(
    IRule_matcher_event *event_handler,
    IDistiller_plugin_api &e,
    DAG_node const *root,
    const mi::mdl::Distiller_options *options) const
{
    (void)e; (void)root; // no unused variable warnings
    bool result = true;
    if (!result && event_handler != NULL)
        fire_postcondition_event(*event_handler);
    return result;
}

void Conditionals::fire_match_event(
    mi::mdl::IRule_matcher_event &event_handler,
    std::size_t id)
{
    Rule_info const &ri = g_rule_info[id];
    event_handler.rule_match_event("Conditionals", ri.ruid, ri.rname, ri.fname, ri.fline);
}

void Conditionals::fire_postcondition_event(
mi::mdl::IRule_matcher_event &event_handler)
{
    event_handler.postcondition_failed("Conditionals");
}

void Conditionals::fire_debug_print(
    mi::mdl::IDistiller_plugin_api &plugin_api,
    mi::mdl::IRule_matcher_event &event_handler,
    std::size_t idx,
    char const *var_name,
    DAG_node const *value)
{
    Rule_info const &ri = g_rule_info[idx];
    event_handler.debug_print(plugin_api, "Conditionals", ri.ruid, ri.rname, ri.fname,
        ri.fline, var_name, value);
}


// Rule info table.
Conditionals::Rule_info const Conditionals::g_rule_info[1] = {
    { 117358, "bsdf_tint", "046_conditionals.mdltl", 8 }
};


} // DIST
} // MI
// End of generated code
