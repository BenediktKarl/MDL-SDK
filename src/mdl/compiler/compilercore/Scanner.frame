/*----------------------------------------------------------------------
Compiler Generator Coco/R,
Copyright (c) 1990, 2004 Hanspeter Moessenboeck, University of Linz
extended by M. Loeberbauer & A. Woess, Univ. of Linz
ported to C++ by Csaba Balazs, University of Szeged
with improvements by Pat Terry, Rhodes University

This program is free software; you can redistribute it and/or modify it 
under the terms of the GNU General Public License as published by the 
Free Software Foundation; either version 2, or (at your option) any 
later version.

This program is distributed in the hope that it will be useful, but 
WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License 
for more details.

You should have received a copy of the GNU General Public License along 
with this program; if not, write to the Free Software Foundation, Inc., 
59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

As an exception, it is allowed to write an extension of Coco/R that is
used as a plugin in non-free software.

If not otherwise stated, any source code generated by Coco/R (other than 
Coco/R itself) does not fall under the GNU General Public License.
-----------------------------------------------------------------------*/

/*----------------------------------------------------------------------
Scanner.h Specification
-----------------------------------------------------------------------*/

-->begin

#if !defined(-->prefixCOCO_SCANNER_H__)
#define -->prefixCOCO_SCANNER_H__

#include <limits.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include <mi/mdl/mdl_streams.h>
#include <mdl/compiler/compilercore/compilercore_cc_conf.h>
#include <mdl/compiler/compilercore/compilercore_errors.h>
#include <mdl/compiler/compilercore/compilercore_memory_arena.h>

#if _MSC_VER >= 1400
#define coco_snprintf sprintf_s
#elif _MSC_VER >= 1300
#define coco_snprintf _snprintf
#elif defined __MINGW32__
#define coco_snprintf _snprintf
#else
// assume every other compiler knows snprintf
#define coco_snprintf snprintf
#endif

#define COCO_UNICODE_MAX 0x10FFFF
#define COCO_MIN_BUFFER_LENGTH 1024
#define COCO_MAX_BUFFER_LENGTH (64*COCO_MIN_BUFFER_LENGTH)
#define COCO_HEAP_BLOCK_SIZE (64*1024)
#define COCO_CPP_NAMESPACE_SEPARATOR ':'

-->namespace_open

// string handling, wide character
unsigned coco_string_hash(char const *data, size_t len);

// forward
class Error_params;
class Scanner;

class Token {
public:
	int kind;     // token kind
	int pos;      // token position in bytes in the source text (starting at 0)
	int charPos;  // token position in characters in the source text (starting at 0)
	int col;      // token column (starting at 1)
	int line;     // token line (starting at 1)
	char const *val; // token value
	Token *next;  // ML 2005-03-11 Peek tokens are kept in linked list

	Token();
};

class Errors {
public:
	int count;			// number of errors detected

	Errors();
	void SynErr(Token const *la, int n);
	virtual void Error(Token const *t, char const *s);
	virtual void Warning(int line, int col, char const *s);
	virtual void Error(int line, int col, int code, Error_params const &params);
	virtual void Warning(int line, int col, int code, Error_params const &params);
}; // Errors

class Buffer {
protected:
	Allocator_builder builder;

	int bufCapacity;    // capacity of buf
	int bufStart;       // position of first byte in buffer relative to input stream
	int bufLen;         // length of buffer
	int fileLen;        // length of input stream (may change if the stream is no file)
	int bufPos;         // current position in buffer
	bool isUserStream;  // was the stream opened by the user?
	IInput_stream *istream; // input stream (non-seekable)
	unsigned char *buf; // input buffer
	Scanner *owner;     // the owner of this buffer
	
	int ReadNextStreamChunk();
	
public:
	static const int EoF = COCO_UNICODE_MAX + 1;

	Buffer(Scanner *owner, IAllocator *alloc, IInput_stream *s, bool isUserStream);
	Buffer(Buffer *b);
	virtual ~Buffer();
	
	IAllocator *get_allocator() const { return builder.get_allocator(); }

	void Close();
	virtual int Read();
	int Peek();
	int GetPos();
	void SetPos(int value);
};

class UTF8Buffer : public Buffer {
public:
	UTF8Buffer(Buffer *b) : Buffer(b) {};
	int Read() MDL_FINAL;
};

//-----------------------------------------------------------------------------------
// StartStates  -- maps characters to start states of tokens
//-----------------------------------------------------------------------------------
class StartStates {
private:
	class Elem {
	public:
		int key, val;
		Elem *next;

		Elem(int key, int val) : key(key), val(val), next(NULL) {}
	};

	Arena_builder builder;
	Elem *tab[128];

public:
	StartStates(Memory_arena &arena)
		: builder(arena)
	{
		memset(tab, 0, 128 * sizeof(Elem*));
	}

	void set(int key, int val) {
		Elem *e = builder.create<Elem>(key, val);
		int k = key & 127;
		e->next = tab[k]; tab[k] = e;
	}

	int state(int key) {
		Elem *e = tab[key & 127];
		while (e != NULL && e->key != key) e = e->next;
		return e == NULL ? 0 : e->val;
	}
};

//-------------------------------------------------------------------------------------------
// KeywordMap  -- maps strings to integers (identifiers to keyword kinds)
//-------------------------------------------------------------------------------------------
class KeywordMap {
private:
	class Elem {
	public:
		char const *key;
		size_t len;
		int val;
		Elem *next;
		
		Elem(const char *key, size_t len, int val)
			: key(key)
			, len(len)
			, val(val)
			, next(NULL)
		{}
	};

	Arena_builder builder;
	Elem *tab[128];

public:
	KeywordMap(Memory_arena &arena)
		: builder(arena)
	{
		memset(tab, 0, 128 * sizeof(Elem*));
	}

	void set(char const *key, int val) {
		size_t len = strlen(key);  // byte length here
		Elem *e = builder.create<Elem>(key, len, val);
		unsigned k = coco_string_hash(key, len) & 127;
		e->next = tab[k]; tab[k] = e;
	}

	int get(int len, char const *key, int defaultVal) {
		const Elem *e = tab[coco_string_hash(key, len) & 127];
		while (e != NULL && (len != e->len || strncmp(e->key, key, len) != 0)) {
			e = e->next;
		}
		return e == NULL ? defaultVal : e->val;
	}

	void change_keyword(char const *key, int val) {
		size_t len = strlen(key);  // byte length here
		Elem *e = tab[coco_string_hash(key, len) & 127];
		while (e != NULL && (len != e->len || strncmp(e->key, key, len) != 0)) {
			e = e->next;
		}
		if (e != NULL) {
			e->val = val;
		}
	}
};

class Scanner {
protected:
	Memory_arena       arena;
	Arena_builder      arena_builder;
	Allocator_builder  alloc_builder;

	unsigned char EOL;
	int eofSym;
	int noSym;
	int maxT;
	StartStates start;
	KeywordMap keywords;

	Token *t;         // current token
	char *tval;    // text of current token
	int tvalLength;   // length of text of current token
	int tlen;         // length of current token

	Token *tokens;    // list of tokens already peeked (first token is a dummy)
	Token *pt;        // current peek token
	Errors *errors;   // error handler

	int ch;           // current input character
-->casing0
	int pos;          // byte position of current character
	int charPos;      // position by unicode characters starting with 0
	int line;         // line number of current character
	int col;          // column number of current character
	int oldEols;      // EOLs that appeared in a comment;

	void AppendVal(Token *t);
	void SetScannerBehindT();
	void UndeterminedComment(int line, int col);
	void initialize_mdl_keywords();

	void Init(int start_line, int start_col);
	void NextCh();
	void AddCh();
-->commentsheader
	Token* NextToken();

public:
	Buffer *buffer;   // scanner buffer
	
	Scanner(
		IAllocator             *alloc,
		Errors                 *err,
		mi::mdl::IInput_stream *s,
		int start_line         = 1,
		int start_col          = 1);
	~Scanner();
	Token *Scan();
	Token *Peek();
	void ResetPeek();
	Token *CreateToken();
	void set_mdl_version(int major, int minor);
	void enable_native_keyword(bool flag);
	void ReportBufferDecoderError();

}; // end Scanner

-->namespace_close

#endif

-->implementation

/*----------------------------------------------------------------------
Scanner.cpp Specification
-----------------------------------------------------------------------*/

-->begin

#include <memory.h>
#include <string.h>
#include "Scanner.h"

-->namespace_open


// string handling, wide character
unsigned coco_string_hash(char const *data, size_t len) {
	unsigned h = 0;
	if (!data) { return 0; }
	for (size_t i = 0; i < len; ++i) {
		h = (h * 7) ^ unsigned(data[i]);
	}
	return h;
}


Token::Token()
	: kind(0)
	, pos(0)
	, charPos(0)
	, col(0)
	, line(0)
	, val(NULL)
	, next(NULL)
{
}

Buffer::Buffer(Scanner *owner, IAllocator *alloc, IInput_stream *s, bool isUserStream)
	: builder(alloc)
	, bufCapacity(COCO_MIN_BUFFER_LENGTH)
	, bufStart(0)
	, bufLen(0)
	, fileLen(0)
	, bufPos(0) // index 0 is already after the file, thus Pos = 0 is invalid
	, isUserStream(isUserStream)
	, istream(s)
	, buf(builder.alloc<unsigned char>(bufCapacity))
	, owner(owner)
{
}

Buffer::Buffer(Buffer *b)
	: builder(b->builder.get_allocator())
	, bufCapacity(b->bufCapacity)
	, bufStart(b->bufStart)
	, bufLen(b->bufLen)
	, fileLen(b->fileLen)
	, bufPos(b->bufPos)
	, isUserStream(b->isUserStream)
	, istream(b->istream)
	, buf(b->buf)
	, owner(b->owner)
{
	b->buf     = NULL;
	b->istream = NULL;
}

Buffer::~Buffer() {
	Close();
	if (buf != NULL) {
		builder.free(buf);
		buf = NULL;
	}
}

void Buffer::Close() {
	if (!isUserStream) {
		if (istream != NULL) {
			istream->release();
			istream = NULL;
		}
	}
}

int Buffer::Read() {
	if (bufPos < bufLen) {
		return buf[bufPos++];
	} else if (GetPos() < fileLen) {
		SetPos(GetPos()); // shift buffer start to Pos
		return buf[bufPos++];
	} else if (ReadNextStreamChunk() > 0) {
		return buf[bufPos++];
	} else {
		return EoF;
	}
}

int Buffer::Peek() {
	int curPos = GetPos();
	int ch = Read();
	SetPos(curPos);
	return ch;
}

int Buffer::GetPos() {
	return bufPos + bufStart;
}

void Buffer::SetPos(int value) {
	if (value < 0) {
		value = 0;
	} else if (value > fileLen) {
		value = fileLen;
	}

	if ((value >= bufStart) && (value < (bufStart + bufLen))) { // already in buffer
		bufPos = value - bufStart;
	} else {
		bufPos = fileLen - bufStart; // make Pos return fileLen
	}
}

// Read the next chunk of bytes from the stream, increases the buffer
// if needed and updates the fields fileLen and bufLen.
// Returns the number of bytes read.
int Buffer::ReadNextStreamChunk() {
	int free = bufCapacity - bufLen;
	if (free == 0) {
		// in the case of a growing input stream
		// we can neither seek in the stream, nor can we
		// foresee the maximum length, thus we must adapt
		// the buffer size on demand.
		bufCapacity = bufLen * 2;
		unsigned char *newBuf = builder.alloc<unsigned char>(bufCapacity);
		memcpy(newBuf, buf, bufLen * sizeof(unsigned char));
		builder.free(buf);
		buf = newBuf;
		free = bufCapacity - bufLen;
	}
	int read = 0;
	if (istream) {
		for (; read < free; ++read) {
			int c = istream->read_char();
			if (c == -1)
				break;
			buf[bufLen + read] = (unsigned char)c;
		}
	}
	if (read > 0) {
		fileLen = bufLen = (bufLen + read);
		return read;
	}
	// end of stream reached
	return 0;
}

Scanner::Scanner(
		IAllocator             *alloc,
		Errors                 *err,
		mi::mdl::IInput_stream *s,
		int                    start_line,
		int                    start_col)
	: arena(alloc, COCO_HEAP_BLOCK_SIZE)
	, arena_builder(arena)
	, alloc_builder(alloc)
	, start(arena)
	, keywords(arena)
	, t(NULL)
	, tlen(0)
	, errors(err)
{
	buffer = alloc_builder.create<Buffer>(this, alloc, s, true);
	Init(start_line, start_col);
}

Scanner::~Scanner() {
	alloc_builder.free(tval);
	alloc_builder.destroy(buffer);
}

void Scanner::Init(int start_line, int start_col) {
	// drop the arena
	arena.drop(NULL);

	EOL    = '\n';
	eofSym = 0;
-->declarations

	tvalLength = 128;
	tval = alloc_builder.alloc<char>(tvalLength); // text of current token

	pos = -1; line = start_line; col = start_col - 1; charPos = -1;
	oldEols = 0;
	NextCh();
	if (ch == 0xEF) { // check optional byte order mark for UTF-8
		NextCh(); int ch1 = ch;
		NextCh(); int ch2 = ch;
		if (ch1 == 0xBB && ch2 == 0xBF) {
			Buffer *oldBuf = buffer;
			buffer = alloc_builder.create<UTF8Buffer>(buffer);
			line = start_line; col = start_col - 1; charPos = -1;
			alloc_builder.destroy(oldBuf);
			NextCh();
		} else {
			errors->Warning(1, 1, "Illegal byte order mark at start of file ignored");
			buffer->SetPos(0);
		}
	} else {
		// always use UTF-8
		buffer->SetPos(0);
		Buffer *oldBuf = buffer;
		buffer = alloc_builder.create<UTF8Buffer>(buffer);
		line = start_line; col = start_col - 1; charPos = -1;
		alloc_builder.destroy(oldBuf);
		NextCh();
	}

-->initialization
	initialize_mdl_keywords();
	pt = tokens = CreateToken(); // first token is a dummy
}

void Scanner::NextCh() {
	if (oldEols > 0) { ch = EOL; oldEols--; }
	else {
		pos = buffer->GetPos();
		// buffer reads unicode chars, if UTF8 has been detected
		ch = buffer->Read(); col++; charPos++;
		// replace isolated '\r' by '\n' in order to make
		// eol handling uniform across Windows, Unix and Mac
		if (ch == L'\r' && buffer->Peek() != L'\n') ch = EOL;
		if (ch == EOL) { line++; col = 0; }
	}
-->casing1
}

void Scanner::AddCh() {
	if (tlen >= tvalLength - 3) {
		tvalLength *= 2;
		char *newBuf = alloc_builder.alloc<char>(tvalLength);
		memcpy(newBuf, tval, tlen*sizeof(char));
		alloc_builder.free(tval);
		tval = newBuf;
	}
	if (ch != Buffer::EoF) {
-->casing2
		if (ch <= 0x7F) {
			// 0xxxxxxx
			tval[tlen++] = char(ch);
		} else if (ch <= 0x7FF) {
			// 110xxxxx 10xxxxxx
			unsigned high = ch >> 6;
			unsigned low = ch & 0x3F;
			tval[tlen++] = char(0xC0 + high);
			tval[tlen++] = char(0x80 + low);
		} else if (ch <= 0xFFFF) {
			if (ch < 0xD800 || ch > 0xDFFF) {
				// 1110xxxx 10xxxxxx 10xxxxxx
				unsigned high = ch >> 12;
				unsigned middle = (ch >> 6) & 0x3F;
				unsigned low = ch & 0x3F;
				tval[tlen++] = char(0xE0 + high);
				tval[tlen++] = char(0x80 + middle);
				tval[tlen++] = char(0x80 + low);
			} else {
				// forbidden surrogate part, replace by (U+FFFD) (or EF BF BD in UTF-8)
				tval[tlen++] = char(0xEF);
				tval[tlen++] = char(0xBF);
				tval[tlen++] = char(0xBD);
			}
		} else if (ch <= 0x10FFFF) {
			// 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx
			unsigned high = (ch >> 18) & 0x07;
			unsigned mh = (ch >> 12) & 0x3F;
			unsigned ml = (ch >> 6) & 0x3F;
			unsigned low = ch & 0x3F;
			tval[tlen++] = char(0xF0 + high);
			tval[tlen++] = char(0x80 + mh);
			tval[tlen++] = char(0x80 + ml);
			tval[tlen++] = char(0x80 + low);
		} else {
			// error, replace by (U+FFFD) (or EF BF BD in UTF-8)
			tval[tlen++] = char(0xEF);
			tval[tlen++] = char(0xBF);
			tval[tlen++] = char(0xBD);
		}
		NextCh();
	}
}

-->comments

Token* Scanner::CreateToken() {
	return arena_builder.create<Token>();
}

void Scanner::AppendVal(Token *t) {
	char *val = arena_builder.alloc<char>(tlen + 1);

	strncpy(val, tval, tlen);
	val[tlen] = L'\0';
	t->val = val;
}

Token* Scanner::NextToken() {
	while (ch == ' ' ||
-->scan1
	) NextCh();
-->scan2
	int recKind = noSym;
	int recEnd = pos;
	t = CreateToken();
	t->pos = pos; t->col = col; t->line = line; t->charPos = charPos;
	int state = start.state(ch);
	tlen = 0; AddCh();

	switch (state) {
		case -1: { t->kind = eofSym; break; } // NextCh already done
		case 0: {
			case_0:
			if (recKind != noSym) {
				tlen = recEnd - t->pos;
				SetScannerBehindT();
			}
			t->kind = recKind; break;
		} // NextCh already done
-->scan3
	}
	AppendVal(t);
	return t;
}

void Scanner::SetScannerBehindT() {
	buffer->SetPos(t->pos);
	NextCh();
	line = t->line; col = t->col; charPos = t->charPos;
	for (int i = 0; i < tlen; i++) NextCh();
}

void Scanner::UndeterminedComment(int line, int col) {
	errors->Error(line, col, UNDETERMINED_COMMENT, Error_params(arena.get_allocator()));
}

// get the next token (possibly a token already seen during peeking)
Token* Scanner::Scan() {
	if (tokens->next == NULL) {
		return pt = tokens = NextToken();
	} else {
		pt = tokens = tokens->next;
		return tokens;
	}
}

// peek for the next token, ignore pragmas
Token* Scanner::Peek() {
	do {
		if (pt->next == NULL) {
			pt->next = NextToken();
		}
		pt = pt->next;
	} while (pt->kind > maxT); // skip pragmas

	return pt;
}

// make sure that peeking starts at the current scan position
void Scanner::ResetPeek() {
	pt = tokens;
}

-->namespace_close
