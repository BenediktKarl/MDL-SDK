/******************************************************************************
 * Copyright (c) 2021-2022, NVIDIA CORPORATION. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *  * Neither the name of NVIDIA CORPORATION nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *****************************************************************************/
mdl 1.6;

import ::anno::*;

export annotation target_material_model(
    string override_rendering_material_simple_name  = ""
    [[ anno::description("If set, the baked material will be rendered using this material. "
        "Otherwise, the target itself is used.") ]],
    string override_rendering_material_module  = ""
    [[ anno::description("If set, the override rendering material will be loaded from this module. "
        "Otherwise the module of the target model will be used. Absolute and relative MDL paths are supported here.") ]]
) [[
    intrinsic(),
    anno::author("NVIDIA Corporation"),
    anno::description("Marks the material for baking. "
        "The first material in the material definition chain that has this annotation is selected for baking.")
]];

export annotation bake_to_texture(
    string texture_name
    [[ anno::description("Name of the baked texture parameter in the rendering material.") ]],

    string constant_name = ""
    [[ anno::description("Name of the constant parameter in the rendering material in case baking was not necessary. "
        "The empty string forces baking even if a constant is sufficient to transport the data.") ]],

    string pixel_format = ""
    [[ anno::description("Pixel format of the texture to bake to.") ]],

    string blend_mode = ""
    [[ anno::description("Control the blending operations when multiple layers are baked to the same texture.") ]],

    string transform = ""
    [[ anno::description("Specifies a transformation to be applied to the data prior to writing to the texture. "
        "An empty string means that the data must not be transformed. "
        "Note, this transformation is not applied to the constant value.") ]],

    string user_data = ""
    [[ anno::description("User defined parameter to control application specific behavior. "
        "Encoding/decoding multiple values is in the responsibility of the application." ) ]]
) [[
    intrinsic(),
    anno::author("NVIDIA Corporation"),
    anno::description("Marks parameters in the target material model for baking and controls the mapping to the rendering material.")
]];
