/***************************************************************************************************
 * Copyright (c) 2012-2024, NVIDIA CORPORATION. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *  * Neither the name of NVIDIA CORPORATION nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 **************************************************************************************************/

// Uses selectors.
mdl 1.7;

import ::df::*;
using ::anno import *;
import ::base::*;
import ::state::*;
import ::tex::*;

// A function with a single int parameter.
export int fd_int(int a = -42 [[ unused() ]]) { return 0; }

// A function with a single float parameter.
export int fd_float(float a = -43.0f [[ unused() ]] ) { return 0; }


// Test texture constructor with selector (differs from fd_texture_success() only in selector).
export int fd_texture_selector(
    uniform texture_2d t = texture_2d("./resources/test.png", tex::gamma_default, "R") [[ unused() ]]
) { return 0; }


// Test that tag version changes of t changed the hash of the compiled material instance.
export material md_textured(uniform texture_2d t = texture_2d("/mdl_elements/resources/test.png"))
= material(
    surface: material_surface(scattering: df::diffuse_reflection_bsdf(
        tint: base::file_texture(texture: t).tint))
);

// Test jitting of a simple environment function.
export color fd_color() { return color(state::direction()); }
// export color fd_color() { return 0.5f * (state::direction() + color(1.0f)); }

// Test jitting of a simple material (plus test of array literals).
export material md_array_literal()
= material(
    surface: material_surface(scattering: df::diffuse_reflection_bsdf(tint: base::gradient3_recolor(
        gradient_positions: float[](0.0f, 0.5f, 1.0f),
        gradient_colors: color[](
            color(1.0f, 0.0f, 0.0f), color(0.0f, 1.0f ,0.0f), color(0.0f, 0.0f, 1.0f))
    ).tint))
);

// Test for exposing bodies and temporaries of materials.
export material md_body(uniform color tint = color(1.0f, 0.5f, 0.0f))
= material(
    surface: material_surface(scattering: df::diffuse_reflection_bsdf( tint: tint)),
    backface: material_surface(scattering: df::diffuse_reflection_bsdf( tint: tint))
);

// Test for exposing bodies and temporaries of functions.
export color fd_body_without_control_flow_direct_call(
  uniform color tint = color(1.0f, 0.5f, 0.0f)
) { return tint + tint; }

// Test for exposing bodies and temporaries of functions.
export color fd_body_without_control_flow_parameter(
  uniform color tint = color(1.0f, 0.5f, 0.0f)
) { return tint; }

// Test for exposing bodies and temporaries of functions.
export color fd_body_without_control_flow_constant(
) { return color(1.0f, 0.5f, 0.0f); }

// Test for exposing bodies and temporaries of functions.
export color fd_body_with_control_flow(
  uniform color tint = color(1.0f, 0.5f, 0.0f),
  int n = 5
) {
  color result();
  for (int i = 0; i < n; ++i)
      result += tint;
  return result;
}

// Prototype for test_resource_sharing1.mdle and test_resource_sharing2.mdle
//
// MDLE generates with
// ./mdlm -p $MI_SRC/io/scene create-mdle ::mdl_elements::test_misc::md_resources test_resource_sharing1.mdle
//
export material md_resources(
    uniform texture_2d t = texture_2d("./resources/test.png", ::tex::gamma_default, ""),
    uniform light_profile l = light_profile("./resources/test.ies"),
    uniform bsdf_measurement b = bsdf_measurement("./resources/test.mbsdf"))
= md_body(
    ::tex::texture_isvalid( t) && df::light_profile_isvalid( l) && df::bsdf_measurement_isvalid( b)
        ? color(1.0f, 0.0f, 0.0f) : color(0.0f, 1.0f, 0.0f)
);
