/******************************************************************************
 * Copyright (c) 2022, NVIDIA CORPORATION. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *  * Neither the name of NVIDIA CORPORATION nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *****************************************************************************/

/*! \page mi_neuray_example_execution_glsl_vk Example for Execution of Compiled MDL Materials (GLSL Vulkan)

<div align="right">
    [\link mi_neuray_example_execution_glsl Previous\endlink]
    [\link mi_neuray_examples Up\endlink]
    [\link mi_neuray_example_df_cuda Next\endlink]
</div>

This example shows how a Vulkan based renderer can call the code generated by the "GLSL" backend for
compiled materials to evaluate sub-expressions of multiple materials. This example mostly explains how
to configure the "GLSL" backend for Vulkan. Loading textures and the texture access functions are not
covered here. For an introduction and a more in depth explanation of the "GLSL" backend and how to work
with textures in please refer to the \link mi_neuray_example_execution_glsl Example for Execution of Compiled MDL Materials (GLSL) \endlink section.

\section example_execution_glsl_vk_new New Topics

  - Configuration of the GLSL backend for Vulkan

\section example_execution_glsl_vk_descr Detailed Description

<dl>
<dt><b>Configuration of the GLSL backend for Vulkan</b></dt>
<dd><br>
Before generating GLSL code the backend has to be optained and configured using #mi::neuraylib::IMdl_backend::set_option().
For a list of possible options see the documentation of the \c set_option method.
It is important to set the correct GLSL version and enable placing read-only data into a storage buffer (SSBO)
instead of global uniforms since, at the time of writing, GLSL for Vulkan does not support global uniforms.
Additionally, the descriptor set and binding of the storage buffer need to be specified.
It is also advisable to set \c "glsl_max_const_data" to zero or a very low value to
avoid running into above problems when you already use some constant data in your own code.

\code
mi::base::Handle<mi::neuraylib::IMdl_backend> be_glsl(
    mdl_backend_api->get_backend(mi::neuraylib::IMdl_backend_api::MB_GLSL));

be_glsl->set_option("glsl_version", "450");
be_glsl->set_option("glsl_place_uniforms_into_ssbo", "on");
be_glsl->set_option("glsl_max_const_data", "0");
be_glsl->set_option("glsl_uniform_ssbo_binding", "1");
be_glsl->set_option("glsl_uniform_ssbo_set", "0");
...
\endcode

When SSBOs are enabled, the GLSL backend will place the data of all uniforms into one SSBO.
The data for the SSBO can be accessed with #mi::neuraylib::ITarget_code::get_ro_data_segment_data().
In this example, the generated SSBO will look like this:

\code
    layout(std430, binding = 1u, set = 0u) readonly buffer mdl_buffer {
        int[256] mdl_field;
        int[256] mdl_field30;
        int[256] mdl_field33;
        int[256] mdl_field36;
        int[256] mdl_field131;
    };
\endcode

Please refer to the \c create_ro_data_buffer function on how to create the SSBO in Vulkan, which
can then be used bound in a descriptor set.

Also please refer to the \c create_material_texture function on how to create the material textures
in Vulkan.
</dd>

\section example_execution_glsl Example Source

To compile the source code, you require a recent version of the Vulkan SDK and GLFW.
For detailed instructions, please refer to the \link mi_neuray_getting_started Getting Started \endlink section.

<b>Source Code Location:</b>
  <tt>examples/mdl_sdk/execution_glsl_vk/example_execution_glsl_vk.cpp</tt>

\include execution_glsl_vk/example_execution_glsl_vk.cpp

<b>Source Code Location:</b>
  <tt>examples/mdl_sdk/execution_glsl_vk/example_execution_glsl_vk.vert</tt>

\include execution_glsl_vk/example_execution_glsl_vk.vert

<b>Source Code Location:</b>
  <tt>examples/mdl_sdk/execution_glsl_vk/example_execution_glsl_vk.frag</tt>

\include execution_glsl_vk/example_execution_glsl_vk.frag

<div align="right">
    [\link mi_neuray_example_execution_glsl Previous\endlink]
    [\link mi_neuray_examples Up\endlink]
    [\link mi_neuray_example_df_cuda Next\endlink]
</div>

*/
